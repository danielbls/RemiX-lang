//Generated by the GOLD Parser Builder

using System;
using System.IO;
using System.Reflection;
using System.Threading;

namespace Remix
{
    class MyParser
    {
        private GOLD.Parser parser = new GOLD.Parser();

        private enum SymbolIndex
        {
            @Eof = 0,                                  // (EOF)
            @Error = 1,                                // (Error)
            @Comment = 2,                              // Comment
            @Newline = 3,                              // NewLine
            @Whitespace = 4,                           // Whitespace
            @Timesdiv = 5,                             // '*/'
            @Divtimes = 6,                             // '/*'
            @Divdiv = 7,                               // '//'
            @Minus = 8,                                // '-'
            @Minusminus = 9,                           // '--'
            @Exclam = 10,                              // '!'
            @Exclameq = 11,                            // '!='
            @Percent = 12,                             // '%'
            @Percenteq = 13,                           // '%='
            @Amp = 14,                                 // '&'
            @Ampamp = 15,                              // '&&'
            @Ampeq = 16,                               // '&='
            @Lparen = 17,                              // '('
            @Rparen = 18,                              // ')'
            @Times = 19,                               // '*'
            @Timeseq = 20,                             // '*='
            @Comma = 21,                               // ','
            @Div = 22,                                 // '/'
            @Diveq = 23,                               // '/='
            @Colon = 24,                               // ':'
            @Semi = 25,                                // ';'
            @Question = 26,                            // '?'
            @Lbracket = 27,                            // '['
            @Rbracket = 28,                            // ']'
            @Caret = 29,                               // '^'
            @Careteq = 30,                             // '^='
            @Lbrace = 31,                              // '{'
            @Pipe = 32,                                // '|'
            @Pipepipe = 33,                            // '||'
            @Pipeeq = 34,                              // '|='
            @Rbrace = 35,                              // '}'
            @Tilde = 36,                               // '~'
            @Plus = 37,                                // '+'
            @Plusplus = 38,                            // '++'
            @Pluseq = 39,                              // '+='
            @Lt = 40,                                  // '<'
            @Ltlt = 41,                                // '<<'
            @Ltlteq = 42,                              // '<<='
            @Lteq = 43,                                // '<='
            @Eq = 44,                                  // '='
            @Minuseq = 45,                             // '-='
            @Eqeq = 46,                                // '=='
            @Gt = 47,                                  // '>'
            @Minusgt = 48,                             // '->'
            @Gteq = 49,                                // '>='
            @Gtgt = 50,                                // '>>'
            @Gtgteq = 51,                              // '>>='
            @Abstract = 52,                            // abstract
            @Add = 53,                                 // add
            @As = 54,                                  // as
            @Assembly = 55,                            // assembly
            @Base = 56,                                // base
            @Bool = 57,                                // bool
            @Break = 58,                               // break
            @Byte = 59,                                // byte
            @Case = 60,                                // case
            @Catch = 61,                               // catch
            @Char = 62,                                // char
            @Charliteral = 63,                         // CharLiteral
            @Checked = 64,                             // checked
            @Class = 65,                               // class
            @Const = 66,                               // const
            @Continue = 67,                            // continue
            @Decimal = 68,                             // decimal
            @Decliteral = 69,                          // DecLiteral
            @Default = 70,                             // default
            @Delegate = 71,                            // delegate
            @Do = 72,                                  // do
            @Double = 73,                              // double
            @Else = 74,                                // else
            @Enum = 75,                                // enum
            @Event = 76,                               // event
            @Explicit = 77,                            // explicit
            @Extern = 78,                              // extern
            @False = 79,                               // false
            @Field = 80,                               // field
            @Finally = 81,                             // finally
            @Fixed = 82,                               // fixed
            @Float = 83,                               // float
            @For = 84,                                 // for
            @Foreach = 85,                             // foreach
            @Get = 86,                                 // get
            @Goto = 87,                                // goto
            @Hexliteral = 88,                          // HexLiteral
            @Identifier = 89,                          // Identifier
            @If = 90,                                  // if
            @Implicit = 91,                            // implicit
            @In = 92,                                  // in
            @Int = 93,                                 // int
            @Interface = 94,                           // interface
            @Internal = 95,                            // internal
            @Is = 96,                                  // is
            @Lock = 97,                                // lock
            @Long = 98,                                // long
            @Membername = 99,                          // MemberName
            @Method = 100,                             // method
            @Module = 101,                             // module
            @Namespace = 102,                          // namespace
            @New = 103,                                // new
            @Null = 104,                               // null
            @Object = 105,                             // object
            @Operator = 106,                           // operator
            @Out = 107,                                // out
            @Override = 108,                           // override
            @Param = 109,                              // param
            @Params = 110,                             // params
            @Partial = 111,                            // partial
            @Private = 112,                            // private
            @Property = 113,                           // property
            @Protected = 114,                          // protected
            @Public = 115,                             // public
            @Readonly = 116,                           // readonly
            @Realliteral = 117,                        // RealLiteral
            @Ref = 118,                                // ref
            @Remove = 119,                             // remove
            @Return = 120,                             // return
            @Sbyte = 121,                              // sbyte
            @Sealed = 122,                             // sealed
            @Set = 123,                                // set
            @Short = 124,                              // short
            @Sizeof = 125,                             // sizeof
            @Stackalloc = 126,                         // stackalloc
            @Static = 127,                             // static
            @String = 128,                             // string
            @Stringliteral = 129,                      // StringLiteral
            @Struct = 130,                             // struct
            @Switch = 131,                             // switch
            @This = 132,                               // this
            @Throw = 133,                              // throw
            @True = 134,                               // true
            @Try = 135,                                // try
            @Type = 136,                               // type
            @Typeof = 137,                             // typeof
            @Uint = 138,                               // uint
            @Ulong = 139,                              // ulong
            @Unchecked = 140,                          // unchecked
            @Unsafe = 141,                             // unsafe
            @Ushort = 142,                             // ushort
            @Using = 143,                              // using
            @Virtual = 144,                            // virtual
            @Void = 145,                               // void
            @Volatile = 146,                           // volatile
            @While = 147,                              // while
            @Accessopt = 148,                          // <Access Opt>
            @Accessordec = 149,                        // <Accessor Dec>
            @Addexp = 150,                             // <Add Exp>
            @Andexp = 151,                             // <And Exp>
            @Arglist = 152,                            // <Arg List>
            @Arglistopt = 153,                         // <Arg List Opt>
            @Argument = 154,                           // <Argument>
            @Arrayinitializer = 155,                   // <Array Initializer>
            @Arrayinitializeropt = 156,                // <Array Initializer Opt>
            @Assigntail = 157,                         // <Assign Tail>
            @Attriblist = 158,                         // <Attrib List>
            @Attribopt = 159,                          // <Attrib Opt>
            @Attribsection = 160,                      // <Attrib Section>
            @Attribtargetspecopt = 161,                // <Attrib Target Spec Opt>
            @Attribute = 162,                          // <Attribute>
            @Basetype = 163,                           // <Base Type>
            @Block = 164,                              // <Block>
            @Blockorsemi = 165,                        // <Block or Semi>
            @Catchclause = 166,                        // <Catch Clause>
            @Catchclauses = 167,                       // <Catch Clauses>
            @Classbaselist = 168,                      // <Class Base List>
            @Classbaseopt = 169,                       // <Class Base Opt>
            @Classdecl = 170,                          // <Class Decl>
            @Classitem = 171,                          // <Class Item>
            @Classitemdecsopt = 172,                   // <Class Item Decs Opt>
            @Compareexp = 173,                         // <Compare Exp>
            @Compilationitem = 174,                    // <Compilation Item>
            @Compilationitems = 175,                   // <Compilation Items>
            @Compilationunit = 176,                    // <Compilation Unit>
            @Conditionalexp = 177,                     // <Conditional Exp>
            @Constantdec = 178,                        // <Constant Dec>
            @Constantdeclarator = 179,                 // <Constant Declarator>
            @Constantdeclarators = 180,                // <Constant Declarators>
            @Constructordec = 181,                     // <Constructor Dec>
            @Constructordeclarator = 182,              // <Constructor Declarator>
            @Constructorinit = 183,                    // <Constructor Init>
            @Constructorinitopt = 184,                 // <Constructor Init Opt>
            @Conversionoperatordecl = 185,             // <Conversion Operator Decl>
            @Delegatedecl = 186,                       // <Delegate Decl>
            @Destructordec = 187,                      // <Destructor Dec>
            @Dimseparators = 188,                      // <Dim Separators>
            @Enumbaseopt = 189,                        // <Enum Base Opt>
            @Enumbody = 190,                           // <Enum Body>
            @Enumdecl = 191,                           // <Enum Decl>
            @Enumitemdec = 192,                        // <Enum Item Dec>
            @Enumitemdecs = 193,                       // <Enum Item Decs>
            @Enumitemdecsopt = 194,                    // <Enum Item Decs Opt>
            @Equalityexp = 195,                        // <Equality Exp>
            @Eventaccessordecs = 196,                  // <Event Accessor Decs>
            @Eventdec = 197,                           // <Event Dec>
            @Expression = 198,                         // <Expression>
            @Expressionlist = 199,                     // <Expression List>
            @Expressionopt = 200,                      // <Expression Opt>
            @Fielddec = 201,                           // <Field Dec>
            @Finallyclauseopt = 202,                   // <Finally Clause Opt>
            @Fixedptrdec = 203,                        // <Fixed Ptr Dec>
            @Fixedptrdecs = 204,                       // <Fixed Ptr Decs>
            @Forconditionopt = 205,                    // <For Condition Opt>
            @Forinitopt = 206,                         // <For Init Opt>
            @Foriteratoropt = 207,                     // <For Iterator Opt>
            @Formalparam = 208,                        // <Formal Param>
            @Formalparamlist = 209,                    // <Formal Param List>
            @Formalparamlistopt = 210,                 // <Formal Param List Opt>
            @Header = 211,                             // <Header>
            @Indexerdec = 212,                         // <Indexer Dec>
            @Integraltype = 213,                       // <Integral Type>
            @Interfaceaccessors = 214,                 // <Interface Accessors>
            @Interfacebaseopt = 215,                   // <Interface Base Opt>
            @Interfacedecl = 216,                      // <Interface Decl>
            @Interfaceemptybody = 217,                 // <Interface Empty Body>
            @Interfaceeventdec = 218,                  // <Interface Event Dec>
            @Interfaceindexerdec = 219,                // <Interface Indexer Dec>
            @Interfaceitemdec = 220,                   // <Interface Item Dec>
            @Interfaceitemdecsopt = 221,               // <Interface Item Decs Opt>
            @Interfacemethoddec = 222,                 // <Interface Method Dec>
            @Interfacepropertydec = 223,               // <Interface Property Dec>
            @Literal = 224,                            // <Literal>
            @Localvardecl = 225,                       // <Local Var Decl>
            @Logicalandexp = 226,                      // <Logical And Exp>
            @Logicalorexp = 227,                       // <Logical Or Exp>
            @Logicalxorexp = 228,                      // <Logical Xor Exp>
            @Memberlist = 229,                         // <Member List>
            @Method2 = 230,                            // <Method>
            @Methoddec = 231,                          // <Method Dec>
            @Methodexp = 232,                          // <Method Exp>
            @Methodsopt = 233,                         // <Methods Opt>
            @Modifier = 234,                           // <Modifier>
            @Modifierlistopt = 235,                    // <Modifier List Opt>
            @Multexp = 236,                            // <Mult Exp>
            @Namespacedec = 237,                       // <Namespace Dec>
            @Namespaceitem = 238,                      // <Namespace Item>
            @Namespaceitems = 239,                     // <Namespace Items>
            @Newopt = 240,                             // <New Opt>
            @Nonarraytype = 241,                       // <Non Array Type>
            @Normalstm = 242,                          // <Normal Stm>
            @Objectexp = 243,                          // <Object Exp>
            @Operatordec = 244,                        // <Operator Dec>
            @Orexp = 245,                              // <Or Exp>
            @Othertype = 246,                          // <Other Type>
            @Overloadop = 247,                         // <Overload Op>
            @Overloadoperatordecl = 248,               // <Overload Operator Decl>
            @Pointeropt = 249,                         // <Pointer Opt>
            @Primary = 250,                            // <Primary>
            @Primaryarraycreationexp = 251,            // <Primary Array Creation Exp>
            @Primaryexp = 252,                         // <Primary Exp>
            @Propertydec = 253,                        // <Property Dec>
            @Qualifiedid = 254,                        // <Qualified ID>
            @Rankspecifier = 255,                      // <Rank Specifier>
            @Rankspecifiers = 256,                     // <Rank Specifiers>
            @Rankspecifiersopt = 257,                  // <Rank Specifiers Opt>
            @Resource = 258,                           // <Resource>
            @Semicolonopt = 259,                       // <Semicolon Opt>
            @Shiftexp = 260,                           // <Shift Exp>
            @Statement = 261,                          // <Statement>
            @Statementexp = 262,                       // <Statement Exp>
            @Statementexplist = 263,                   // <Statement Exp List>
            @Stmlist = 264,                            // <Stm List>
            @Structdecl = 265,                         // <Struct Decl>
            @Switchlabel = 266,                        // <Switch Label>
            @Switchlabels = 267,                       // <Switch Labels>
            @Switchsection = 268,                      // <Switch Section>
            @Switchsectionsopt = 269,                  // <Switch Sections Opt>
            @Thenstm = 270,                            // <Then Stm>
            @Type2 = 271,                              // <Type>
            @Typedecl = 272,                           // <Type Decl>
            @Unaryexp = 273,                           // <Unary Exp>
            @Usingdirective = 274,                     // <Using Directive>
            @Usinglist = 275,                          // <Using List>
            @Validid = 276,                            // <Valid ID>
            @Variabledeclarator = 277,                 // <Variable Declarator>
            @Variabledecs = 278,                       // <Variable Decs>
            @Variableinitializer = 279,                // <Variable Initializer>
            @Variableinitializerlist = 280,            // <Variable Initializer List>
            @Variableinitializerlistopt = 281          // <Variable Initializer List Opt>
        }

        private enum ProductionIndex
        {
            @Blockorsemi = 0,                          // <Block or Semi> ::= <Block>
            @Blockorsemi_Semi = 1,                     // <Block or Semi> ::= ';'
            @Validid_Identifier = 2,                   // <Valid ID> ::= Identifier
            @Validid_This = 3,                         // <Valid ID> ::= this
            @Validid_Base = 4,                         // <Valid ID> ::= base
            @Validid = 5,                              // <Valid ID> ::= <Base Type>
            @Qualifiedid = 6,                          // <Qualified ID> ::= <Valid ID> <Member List>
            @Memberlist_Membername = 7,                // <Member List> ::= <Member List> MemberName
            @Memberlist = 8,                           // <Member List> ::= 
            @Semicolonopt_Semi = 9,                    // <Semicolon Opt> ::= ';'
            @Semicolonopt = 10,                        // <Semicolon Opt> ::= 
            @Literal_True = 11,                        // <Literal> ::= true
            @Literal_False = 12,                       // <Literal> ::= false
            @Literal_Decliteral = 13,                  // <Literal> ::= DecLiteral
            @Literal_Hexliteral = 14,                  // <Literal> ::= HexLiteral
            @Literal_Realliteral = 15,                 // <Literal> ::= RealLiteral
            @Literal_Charliteral = 16,                 // <Literal> ::= CharLiteral
            @Literal_Stringliteral = 17,               // <Literal> ::= StringLiteral
            @Literal_Null = 18,                        // <Literal> ::= null
            @Type = 19,                                // <Type> ::= <Non Array Type>
            @Type_Times = 20,                          // <Type> ::= <Non Array Type> '*'
            @Type2 = 21,                               // <Type> ::= <Non Array Type> <Rank Specifiers>
            @Type_Times2 = 22,                         // <Type> ::= <Non Array Type> <Rank Specifiers> '*'
            @Pointeropt_Times = 23,                    // <Pointer Opt> ::= '*'
            @Pointeropt = 24,                          // <Pointer Opt> ::= 
            @Nonarraytype = 25,                        // <Non Array Type> ::= <Qualified ID>
            @Basetype = 26,                            // <Base Type> ::= <Other Type>
            @Basetype2 = 27,                           // <Base Type> ::= <Integral Type>
            @Othertype_Float = 28,                     // <Other Type> ::= float
            @Othertype_Double = 29,                    // <Other Type> ::= double
            @Othertype_Decimal = 30,                   // <Other Type> ::= decimal
            @Othertype_Bool = 31,                      // <Other Type> ::= bool
            @Othertype_Void = 32,                      // <Other Type> ::= void
            @Othertype_Object = 33,                    // <Other Type> ::= object
            @Othertype_String = 34,                    // <Other Type> ::= string
            @Integraltype_Sbyte = 35,                  // <Integral Type> ::= sbyte
            @Integraltype_Byte = 36,                   // <Integral Type> ::= byte
            @Integraltype_Short = 37,                  // <Integral Type> ::= short
            @Integraltype_Ushort = 38,                 // <Integral Type> ::= ushort
            @Integraltype_Int = 39,                    // <Integral Type> ::= int
            @Integraltype_Uint = 40,                   // <Integral Type> ::= uint
            @Integraltype_Long = 41,                   // <Integral Type> ::= long
            @Integraltype_Ulong = 42,                  // <Integral Type> ::= ulong
            @Integraltype_Char = 43,                   // <Integral Type> ::= char
            @Rankspecifiersopt = 44,                   // <Rank Specifiers Opt> ::= <Rank Specifiers Opt> <Rank Specifier>
            @Rankspecifiersopt2 = 45,                  // <Rank Specifiers Opt> ::= 
            @Rankspecifiers = 46,                      // <Rank Specifiers> ::= <Rank Specifiers> <Rank Specifier>
            @Rankspecifiers2 = 47,                     // <Rank Specifiers> ::= <Rank Specifier>
            @Rankspecifier_Lbracket_Rbracket = 48,     // <Rank Specifier> ::= '[' <Dim Separators> ']'
            @Dimseparators_Comma = 49,                 // <Dim Separators> ::= <Dim Separators> ','
            @Dimseparators = 50,                       // <Dim Separators> ::= 
            @Expressionopt = 51,                       // <Expression Opt> ::= <Expression>
            @Expressionopt2 = 52,                      // <Expression Opt> ::= 
            @Expressionlist = 53,                      // <Expression List> ::= <Expression>
            @Expressionlist_Comma = 54,                // <Expression List> ::= <Expression> ',' <Expression List>
            @Expression_Eq = 55,                       // <Expression> ::= <Conditional Exp> '=' <Expression>
            @Expression_Pluseq = 56,                   // <Expression> ::= <Conditional Exp> '+=' <Expression>
            @Expression_Minuseq = 57,                  // <Expression> ::= <Conditional Exp> '-=' <Expression>
            @Expression_Timeseq = 58,                  // <Expression> ::= <Conditional Exp> '*=' <Expression>
            @Expression_Diveq = 59,                    // <Expression> ::= <Conditional Exp> '/=' <Expression>
            @Expression_Careteq = 60,                  // <Expression> ::= <Conditional Exp> '^=' <Expression>
            @Expression_Ampeq = 61,                    // <Expression> ::= <Conditional Exp> '&=' <Expression>
            @Expression_Pipeeq = 62,                   // <Expression> ::= <Conditional Exp> '|=' <Expression>
            @Expression_Percenteq = 63,                // <Expression> ::= <Conditional Exp> '%=' <Expression>
            @Expression_Ltlteq = 64,                   // <Expression> ::= <Conditional Exp> '<<=' <Expression>
            @Expression_Gtgteq = 65,                   // <Expression> ::= <Conditional Exp> '>>=' <Expression>
            @Expression = 66,                          // <Expression> ::= <Conditional Exp>
            @Conditionalexp_Question_Colon = 67,       // <Conditional Exp> ::= <Or Exp> '?' <Or Exp> ':' <Conditional Exp>
            @Conditionalexp = 68,                      // <Conditional Exp> ::= <Or Exp>
            @Orexp_Pipepipe = 69,                      // <Or Exp> ::= <Or Exp> '||' <And Exp>
            @Orexp = 70,                               // <Or Exp> ::= <And Exp>
            @Andexp_Ampamp = 71,                       // <And Exp> ::= <And Exp> '&&' <Logical Or Exp>
            @Andexp = 72,                              // <And Exp> ::= <Logical Or Exp>
            @Logicalorexp_Pipe = 73,                   // <Logical Or Exp> ::= <Logical Or Exp> '|' <Logical Xor Exp>
            @Logicalorexp = 74,                        // <Logical Or Exp> ::= <Logical Xor Exp>
            @Logicalxorexp_Caret = 75,                 // <Logical Xor Exp> ::= <Logical Xor Exp> '^' <Logical And Exp>
            @Logicalxorexp = 76,                       // <Logical Xor Exp> ::= <Logical And Exp>
            @Logicalandexp_Amp = 77,                   // <Logical And Exp> ::= <Logical And Exp> '&' <Equality Exp>
            @Logicalandexp = 78,                       // <Logical And Exp> ::= <Equality Exp>
            @Equalityexp_Eqeq = 79,                    // <Equality Exp> ::= <Equality Exp> '==' <Compare Exp>
            @Equalityexp_Exclameq = 80,                // <Equality Exp> ::= <Equality Exp> '!=' <Compare Exp>
            @Equalityexp = 81,                         // <Equality Exp> ::= <Compare Exp>
            @Compareexp_Lt = 82,                       // <Compare Exp> ::= <Compare Exp> '<' <Shift Exp>
            @Compareexp_Gt = 83,                       // <Compare Exp> ::= <Compare Exp> '>' <Shift Exp>
            @Compareexp_Lteq = 84,                     // <Compare Exp> ::= <Compare Exp> '<=' <Shift Exp>
            @Compareexp_Gteq = 85,                     // <Compare Exp> ::= <Compare Exp> '>=' <Shift Exp>
            @Compareexp_Is = 86,                       // <Compare Exp> ::= <Compare Exp> is <Type>
            @Compareexp_As = 87,                       // <Compare Exp> ::= <Compare Exp> as <Type>
            @Compareexp = 88,                          // <Compare Exp> ::= <Shift Exp>
            @Shiftexp_Ltlt = 89,                       // <Shift Exp> ::= <Shift Exp> '<<' <Add Exp>
            @Shiftexp_Gtgt = 90,                       // <Shift Exp> ::= <Shift Exp> '>>' <Add Exp>
            @Shiftexp = 91,                            // <Shift Exp> ::= <Add Exp>
            @Addexp_Plus = 92,                         // <Add Exp> ::= <Add Exp> '+' <Mult Exp>
            @Addexp_Minus = 93,                        // <Add Exp> ::= <Add Exp> '-' <Mult Exp>
            @Addexp = 94,                              // <Add Exp> ::= <Mult Exp>
            @Multexp_Times = 95,                       // <Mult Exp> ::= <Mult Exp> '*' <Unary Exp>
            @Multexp_Div = 96,                         // <Mult Exp> ::= <Mult Exp> '/' <Unary Exp>
            @Multexp_Percent = 97,                     // <Mult Exp> ::= <Mult Exp> '%' <Unary Exp>
            @Multexp = 98,                             // <Mult Exp> ::= <Unary Exp>
            @Unaryexp_Exclam = 99,                     // <Unary Exp> ::= '!' <Unary Exp>
            @Unaryexp_Tilde = 100,                     // <Unary Exp> ::= '~' <Unary Exp>
            @Unaryexp_Minus = 101,                     // <Unary Exp> ::= '-' <Unary Exp>
            @Unaryexp_Plusplus = 102,                  // <Unary Exp> ::= '++' <Unary Exp>
            @Unaryexp_Minusminus = 103,                // <Unary Exp> ::= '--' <Unary Exp>
            @Unaryexp_Lparen_Rparen = 104,             // <Unary Exp> ::= '(' <Expression> ')' <Object Exp>
            @Unaryexp = 105,                           // <Unary Exp> ::= <Object Exp>
            @Objectexp_Delegate_Lparen_Rparen = 106,   // <Object Exp> ::= delegate '(' <Formal Param List Opt> ')' <Block>
            @Objectexp = 107,                          // <Object Exp> ::= <Primary Array Creation Exp>
            @Objectexp2 = 108,                         // <Object Exp> ::= <Method Exp>
            @Primaryarraycreationexp_New_Lbracket_Rbracket = 109,  // <Primary Array Creation Exp> ::= new <Non Array Type> '[' <Expression List> ']' <Rank Specifiers Opt> <Array Initializer Opt>
            @Primaryarraycreationexp_New = 110,        // <Primary Array Creation Exp> ::= new <Non Array Type> <Rank Specifiers> <Array Initializer>
            @Methodexp = 111,                          // <Method Exp> ::= <Method Exp> <Method>
            @Methodexp2 = 112,                         // <Method Exp> ::= <Primary Exp>
            @Primaryexp_Typeof_Lparen_Rparen = 113,    // <Primary Exp> ::= typeof '(' <Type> ')'
            @Primaryexp_Sizeof_Lparen_Rparen = 114,    // <Primary Exp> ::= sizeof '(' <Type> ')'
            @Primaryexp_Checked_Lparen_Rparen = 115,   // <Primary Exp> ::= checked '(' <Expression> ')'
            @Primaryexp_Unchecked_Lparen_Rparen = 116,  // <Primary Exp> ::= unchecked '(' <Expression> ')'
            @Primaryexp_New_Lparen_Rparen = 117,       // <Primary Exp> ::= new <Non Array Type> '(' <Arg List Opt> ')'
            @Primaryexp = 118,                         // <Primary Exp> ::= <Primary>
            @Primaryexp_Lparen_Rparen = 119,           // <Primary Exp> ::= '(' <Expression> ')'
            @Primary = 120,                            // <Primary> ::= <Valid ID>
            @Primary_Lparen_Rparen = 121,              // <Primary> ::= <Valid ID> '(' <Arg List Opt> ')'
            @Primary2 = 122,                           // <Primary> ::= <Literal>
            @Arglistopt = 123,                         // <Arg List Opt> ::= <Arg List>
            @Arglistopt2 = 124,                        // <Arg List Opt> ::= 
            @Arglist_Comma = 125,                      // <Arg List> ::= <Arg List> ',' <Argument>
            @Arglist = 126,                            // <Arg List> ::= <Argument>
            @Argument = 127,                           // <Argument> ::= <Expression>
            @Argument_Ref = 128,                       // <Argument> ::= ref <Expression>
            @Argument_Out = 129,                       // <Argument> ::= out <Expression>
            @Stmlist = 130,                            // <Stm List> ::= <Stm List> <Statement>
            @Stmlist2 = 131,                           // <Stm List> ::= <Statement>
            @Statement_Identifier_Colon = 132,         // <Statement> ::= Identifier ':'
            @Statement_Semi = 133,                     // <Statement> ::= <Local Var Decl> ';'
            @Statement_If_Lparen_Rparen = 134,         // <Statement> ::= if '(' <Expression> ')' <Statement>
            @Statement_If_Lparen_Rparen_Else = 135,    // <Statement> ::= if '(' <Expression> ')' <Then Stm> else <Statement>
            @Statement_For_Lparen_Semi_Semi_Rparen = 136,  // <Statement> ::= for '(' <For Init Opt> ';' <For Condition Opt> ';' <For Iterator Opt> ')' <Statement>
            @Statement_Foreach_Lparen_Identifier_In_Rparen = 137,  // <Statement> ::= foreach '(' <Type> Identifier in <Expression> ')' <Statement>
            @Statement_While_Lparen_Rparen = 138,      // <Statement> ::= while '(' <Expression> ')' <Statement>
            @Statement_Lock_Lparen_Rparen = 139,       // <Statement> ::= lock '(' <Expression> ')' <Statement>
            @Statement_Using_Lparen_Rparen = 140,      // <Statement> ::= using '(' <Resource> ')' <Statement>
            @Statement_Fixed_Lparen_Rparen = 141,      // <Statement> ::= fixed '(' <Type> <Fixed Ptr Decs> ')' <Statement>
            @Statement_Delegate_Lparen_Rparen = 142,   // <Statement> ::= delegate '(' <Formal Param List Opt> ')' <Statement>
            @Statement = 143,                          // <Statement> ::= <Normal Stm>
            @Thenstm_If_Lparen_Rparen_Else = 144,      // <Then Stm> ::= if '(' <Expression> ')' <Then Stm> else <Then Stm>
            @Thenstm_For_Lparen_Semi_Semi_Rparen = 145,  // <Then Stm> ::= for '(' <For Init Opt> ';' <For Condition Opt> ';' <For Iterator Opt> ')' <Then Stm>
            @Thenstm_Foreach_Lparen_Identifier_In_Rparen = 146,  // <Then Stm> ::= foreach '(' <Type> Identifier in <Expression> ')' <Then Stm>
            @Thenstm_While_Lparen_Rparen = 147,        // <Then Stm> ::= while '(' <Expression> ')' <Then Stm>
            @Thenstm_Lock_Lparen_Rparen = 148,         // <Then Stm> ::= lock '(' <Expression> ')' <Then Stm>
            @Thenstm_Using_Lparen_Rparen = 149,        // <Then Stm> ::= using '(' <Resource> ')' <Then Stm>
            @Thenstm_Fixed_Lparen_Rparen = 150,        // <Then Stm> ::= fixed '(' <Type> <Fixed Ptr Decs> ')' <Then Stm>
            @Thenstm_Delegate_Lparen_Rparen = 151,     // <Then Stm> ::= delegate '(' <Formal Param List Opt> ')' <Then Stm>
            @Thenstm = 152,                            // <Then Stm> ::= <Normal Stm>
            @Normalstm_Switch_Lparen_Rparen_Lbrace_Rbrace = 153,  // <Normal Stm> ::= switch '(' <Expression> ')' '{' <Switch Sections Opt> '}'
            @Normalstm_Do_While_Lparen_Rparen_Semi = 154,  // <Normal Stm> ::= do <Normal Stm> while '(' <Expression> ')' ';'
            @Normalstm_Try = 155,                      // <Normal Stm> ::= try <Block> <Catch Clauses> <Finally Clause Opt>
            @Normalstm_Checked = 156,                  // <Normal Stm> ::= checked <Block>
            @Normalstm_Unchecked = 157,                // <Normal Stm> ::= unchecked <Block>
            @Normalstm_Unsafe = 158,                   // <Normal Stm> ::= unsafe <Block>
            @Normalstm_Break_Semi = 159,               // <Normal Stm> ::= break ';'
            @Normalstm_Continue_Semi = 160,            // <Normal Stm> ::= continue ';'
            @Normalstm_Goto_Identifier_Semi = 161,     // <Normal Stm> ::= goto Identifier ';'
            @Normalstm_Goto_Case_Semi = 162,           // <Normal Stm> ::= goto case <Expression> ';'
            @Normalstm_Goto_Default_Semi = 163,        // <Normal Stm> ::= goto default ';'
            @Normalstm_Return_Semi = 164,              // <Normal Stm> ::= return <Expression Opt> ';'
            @Normalstm_Throw_Semi = 165,               // <Normal Stm> ::= throw <Expression Opt> ';'
            @Normalstm_Semi = 166,                     // <Normal Stm> ::= <Statement Exp> ';'
            @Normalstm_Semi2 = 167,                    // <Normal Stm> ::= ';'
            @Normalstm = 168,                          // <Normal Stm> ::= <Block>
            @Block_Lbrace_Rbrace = 169,                // <Block> ::= '{' <Stm List> '}'
            @Block_Lbrace_Rbrace2 = 170,               // <Block> ::= '{' '}'
            @Variabledecs = 171,                       // <Variable Decs> ::= <Variable Declarator>
            @Variabledecs_Comma = 172,                 // <Variable Decs> ::= <Variable Decs> ',' <Variable Declarator>
            @Variabledeclarator_Identifier = 173,      // <Variable Declarator> ::= Identifier
            @Variabledeclarator_Identifier_Eq = 174,   // <Variable Declarator> ::= Identifier '=' <Variable Initializer>
            @Variableinitializer = 175,                // <Variable Initializer> ::= <Expression>
            @Variableinitializer2 = 176,               // <Variable Initializer> ::= <Array Initializer>
            @Variableinitializer_Stackalloc_Lbracket_Rbracket = 177,  // <Variable Initializer> ::= stackalloc <Non Array Type> '[' <Non Array Type> ']'
            @Constantdeclarators = 178,                // <Constant Declarators> ::= <Constant Declarator>
            @Constantdeclarators_Comma = 179,          // <Constant Declarators> ::= <Constant Declarators> ',' <Constant Declarator>
            @Constantdeclarator_Identifier_Eq = 180,   // <Constant Declarator> ::= Identifier '=' <Expression>
            @Switchsectionsopt = 181,                  // <Switch Sections Opt> ::= <Switch Sections Opt> <Switch Section>
            @Switchsectionsopt2 = 182,                 // <Switch Sections Opt> ::= 
            @Switchsection = 183,                      // <Switch Section> ::= <Switch Labels> <Stm List>
            @Switchlabels = 184,                       // <Switch Labels> ::= <Switch Label>
            @Switchlabels2 = 185,                      // <Switch Labels> ::= <Switch Labels> <Switch Label>
            @Switchlabel_Case_Colon = 186,             // <Switch Label> ::= case <Expression> ':'
            @Switchlabel_Default_Colon = 187,          // <Switch Label> ::= default ':'
            @Forinitopt = 188,                         // <For Init Opt> ::= <Local Var Decl>
            @Forinitopt2 = 189,                        // <For Init Opt> ::= <Statement Exp List>
            @Forinitopt3 = 190,                        // <For Init Opt> ::= 
            @Foriteratoropt = 191,                     // <For Iterator Opt> ::= <Statement Exp List>
            @Foriteratoropt2 = 192,                    // <For Iterator Opt> ::= 
            @Forconditionopt = 193,                    // <For Condition Opt> ::= <Expression>
            @Forconditionopt2 = 194,                   // <For Condition Opt> ::= 
            @Statementexplist_Comma = 195,             // <Statement Exp List> ::= <Statement Exp List> ',' <Statement Exp>
            @Statementexplist = 196,                   // <Statement Exp List> ::= <Statement Exp>
            @Catchclauses = 197,                       // <Catch Clauses> ::= <Catch Clause> <Catch Clauses>
            @Catchclauses2 = 198,                      // <Catch Clauses> ::= 
            @Catchclause_Catch_Lparen_Identifier_Rparen = 199,  // <Catch Clause> ::= catch '(' <Qualified ID> Identifier ')' <Block>
            @Catchclause_Catch_Lparen_Rparen = 200,    // <Catch Clause> ::= catch '(' <Qualified ID> ')' <Block>
            @Catchclause_Catch = 201,                  // <Catch Clause> ::= catch <Block>
            @Finallyclauseopt_Finally = 202,           // <Finally Clause Opt> ::= finally <Block>
            @Finallyclauseopt = 203,                   // <Finally Clause Opt> ::= 
            @Resource = 204,                           // <Resource> ::= <Local Var Decl>
            @Resource2 = 205,                          // <Resource> ::= <Statement Exp>
            @Fixedptrdecs = 206,                       // <Fixed Ptr Decs> ::= <Fixed Ptr Dec>
            @Fixedptrdecs_Comma = 207,                 // <Fixed Ptr Decs> ::= <Fixed Ptr Decs> ',' <Fixed Ptr Dec>
            @Fixedptrdec_Identifier_Eq = 208,          // <Fixed Ptr Dec> ::= Identifier '=' <Expression>
            @Localvardecl = 209,                       // <Local Var Decl> ::= <Qualified ID> <Rank Specifiers> <Pointer Opt> <Variable Decs>
            @Localvardecl2 = 210,                      // <Local Var Decl> ::= <Qualified ID> <Pointer Opt> <Variable Decs>
            @Statementexp_Lparen_Rparen = 211,         // <Statement Exp> ::= <Qualified ID> '(' <Arg List Opt> ')'
            @Statementexp_Lparen_Rparen2 = 212,        // <Statement Exp> ::= <Qualified ID> '(' <Arg List Opt> ')' <Methods Opt> <Assign Tail>
            @Statementexp_Lbracket_Rbracket = 213,     // <Statement Exp> ::= <Qualified ID> '[' <Expression List> ']' <Methods Opt> <Assign Tail>
            @Statementexp_Minusgt_Identifier = 214,    // <Statement Exp> ::= <Qualified ID> '->' Identifier <Methods Opt> <Assign Tail>
            @Statementexp_Plusplus = 215,              // <Statement Exp> ::= <Qualified ID> '++' <Methods Opt> <Assign Tail>
            @Statementexp_Minusminus = 216,            // <Statement Exp> ::= <Qualified ID> '--' <Methods Opt> <Assign Tail>
            @Statementexp = 217,                       // <Statement Exp> ::= <Qualified ID> <Assign Tail>
            @Assigntail_Plusplus = 218,                // <Assign Tail> ::= '++'
            @Assigntail_Minusminus = 219,              // <Assign Tail> ::= '--'
            @Assigntail_Eq = 220,                      // <Assign Tail> ::= '=' <Expression>
            @Assigntail_Pluseq = 221,                  // <Assign Tail> ::= '+=' <Expression>
            @Assigntail_Minuseq = 222,                 // <Assign Tail> ::= '-=' <Expression>
            @Assigntail_Timeseq = 223,                 // <Assign Tail> ::= '*=' <Expression>
            @Assigntail_Diveq = 224,                   // <Assign Tail> ::= '/=' <Expression>
            @Assigntail_Careteq = 225,                 // <Assign Tail> ::= '^=' <Expression>
            @Assigntail_Ampeq = 226,                   // <Assign Tail> ::= '&=' <Expression>
            @Assigntail_Pipeeq = 227,                  // <Assign Tail> ::= '|=' <Expression>
            @Assigntail_Percenteq = 228,               // <Assign Tail> ::= '%=' <Expression>
            @Assigntail_Ltlteq = 229,                  // <Assign Tail> ::= '<<=' <Expression>
            @Assigntail_Gtgteq = 230,                  // <Assign Tail> ::= '>>=' <Expression>
            @Methodsopt = 231,                         // <Methods Opt> ::= <Methods Opt> <Method>
            @Methodsopt2 = 232,                        // <Methods Opt> ::= 
            @Method_Membername = 233,                  // <Method> ::= MemberName
            @Method_Membername_Lparen_Rparen = 234,    // <Method> ::= MemberName '(' <Arg List Opt> ')'
            @Method_Lbracket_Rbracket = 235,           // <Method> ::= '[' <Expression List> ']'
            @Method_Minusgt_Identifier = 236,          // <Method> ::= '->' Identifier
            @Method_Plusplus = 237,                    // <Method> ::= '++'
            @Method_Minusminus = 238,                  // <Method> ::= '--'
            @Compilationunit = 239,                    // <Compilation Unit> ::= <Using List> <Compilation Items>
            @Usinglist = 240,                          // <Using List> ::= <Using List> <Using Directive>
            @Usinglist2 = 241,                         // <Using List> ::= 
            @Usingdirective_Using_Identifier_Eq_Semi = 242,  // <Using Directive> ::= using Identifier '=' <Qualified ID> ';'
            @Usingdirective_Using_Semi = 243,          // <Using Directive> ::= using <Qualified ID> ';'
            @Compilationitems = 244,                   // <Compilation Items> ::= <Compilation Items> <Compilation Item>
            @Compilationitems2 = 245,                  // <Compilation Items> ::= 
            @Compilationitem = 246,                    // <Compilation Item> ::= <Namespace Dec>
            @Compilationitem2 = 247,                   // <Compilation Item> ::= <Namespace Item>
            @Namespacedec_Namespace_Lbrace_Rbrace = 248,  // <Namespace Dec> ::= <Attrib Opt> namespace <Qualified ID> '{' <Using List> <Namespace Items> '}' <Semicolon Opt>
            @Namespaceitems = 249,                     // <Namespace Items> ::= <Namespace Items> <Namespace Item>
            @Namespaceitems2 = 250,                    // <Namespace Items> ::= 
            @Namespaceitem = 251,                      // <Namespace Item> ::= <Constant Dec>
            @Namespaceitem2 = 252,                     // <Namespace Item> ::= <Field Dec>
            @Namespaceitem3 = 253,                     // <Namespace Item> ::= <Method Dec>
            @Namespaceitem4 = 254,                     // <Namespace Item> ::= <Property Dec>
            @Namespaceitem5 = 255,                     // <Namespace Item> ::= <Type Decl>
            @Typedecl = 256,                           // <Type Decl> ::= <Class Decl>
            @Typedecl2 = 257,                          // <Type Decl> ::= <Struct Decl>
            @Typedecl3 = 258,                          // <Type Decl> ::= <Interface Decl>
            @Typedecl4 = 259,                          // <Type Decl> ::= <Enum Decl>
            @Typedecl5 = 260,                          // <Type Decl> ::= <Delegate Decl>
            @Header = 261,                             // <Header> ::= <Attrib Opt> <Access Opt> <Modifier List Opt>
            @Accessopt_Private = 262,                  // <Access Opt> ::= private
            @Accessopt_Protected = 263,                // <Access Opt> ::= protected
            @Accessopt_Public = 264,                   // <Access Opt> ::= public
            @Accessopt_Internal = 265,                 // <Access Opt> ::= internal
            @Accessopt = 266,                          // <Access Opt> ::= 
            @Modifierlistopt = 267,                    // <Modifier List Opt> ::= <Modifier List Opt> <Modifier>
            @Modifierlistopt2 = 268,                   // <Modifier List Opt> ::= 
            @Modifier_Abstract = 269,                  // <Modifier> ::= abstract
            @Modifier_Extern = 270,                    // <Modifier> ::= extern
            @Modifier_New = 271,                       // <Modifier> ::= new
            @Modifier_Override = 272,                  // <Modifier> ::= override
            @Modifier_Partial = 273,                   // <Modifier> ::= partial
            @Modifier_Readonly = 274,                  // <Modifier> ::= readonly
            @Modifier_Sealed = 275,                    // <Modifier> ::= sealed
            @Modifier_Static = 276,                    // <Modifier> ::= static
            @Modifier_Unsafe = 277,                    // <Modifier> ::= unsafe
            @Modifier_Virtual = 278,                   // <Modifier> ::= virtual
            @Modifier_Volatile = 279,                  // <Modifier> ::= volatile
            @Classdecl_Class_Identifier_Lbrace_Rbrace = 280,  // <Class Decl> ::= <Header> class Identifier <Class Base Opt> '{' <Class Item Decs Opt> '}' <Semicolon Opt>
            @Classbaseopt_Colon = 281,                 // <Class Base Opt> ::= ':' <Class Base List>
            @Classbaseopt = 282,                       // <Class Base Opt> ::= 
            @Classbaselist_Comma = 283,                // <Class Base List> ::= <Class Base List> ',' <Non Array Type>
            @Classbaselist = 284,                      // <Class Base List> ::= <Non Array Type>
            @Classitemdecsopt = 285,                   // <Class Item Decs Opt> ::= <Class Item Decs Opt> <Class Item>
            @Classitemdecsopt2 = 286,                  // <Class Item Decs Opt> ::= 
            @Classitem = 287,                          // <Class Item> ::= <Constant Dec>
            @Classitem2 = 288,                         // <Class Item> ::= <Field Dec>
            @Classitem3 = 289,                         // <Class Item> ::= <Method Dec>
            @Classitem4 = 290,                         // <Class Item> ::= <Property Dec>
            @Classitem5 = 291,                         // <Class Item> ::= <Event Dec>
            @Classitem6 = 292,                         // <Class Item> ::= <Indexer Dec>
            @Classitem7 = 293,                         // <Class Item> ::= <Operator Dec>
            @Classitem8 = 294,                         // <Class Item> ::= <Constructor Dec>
            @Classitem9 = 295,                         // <Class Item> ::= <Destructor Dec>
            @Classitem10 = 296,                        // <Class Item> ::= <Type Decl>
            @Constantdec_Const_Semi = 297,             // <Constant Dec> ::= <Header> const <Type> <Constant Declarators> ';'
            @Fielddec_Semi = 298,                      // <Field Dec> ::= <Header> <Type> <Variable Decs> ';'
            @Methoddec_Lparen_Rparen = 299,            // <Method Dec> ::= <Header> <Type> <Qualified ID> '(' <Formal Param List Opt> ')' <Block or Semi>
            @Formalparamlistopt = 300,                 // <Formal Param List Opt> ::= <Formal Param List>
            @Formalparamlistopt2 = 301,                // <Formal Param List Opt> ::= 
            @Formalparamlist = 302,                    // <Formal Param List> ::= <Formal Param>
            @Formalparamlist_Comma = 303,              // <Formal Param List> ::= <Formal Param List> ',' <Formal Param>
            @Formalparam_Identifier = 304,             // <Formal Param> ::= <Attrib Opt> <Type> Identifier
            @Formalparam_Ref_Identifier = 305,         // <Formal Param> ::= <Attrib Opt> ref <Type> Identifier
            @Formalparam_Out_Identifier = 306,         // <Formal Param> ::= <Attrib Opt> out <Type> Identifier
            @Formalparam_Params_Identifier = 307,      // <Formal Param> ::= <Attrib Opt> params <Type> Identifier
            @Propertydec_Lbrace_Rbrace = 308,          // <Property Dec> ::= <Header> <Type> <Qualified ID> '{' <Accessor Dec> '}'
            @Accessordec_Get = 309,                    // <Accessor Dec> ::= <Access Opt> get <Block or Semi>
            @Accessordec_Get_Set = 310,                // <Accessor Dec> ::= <Access Opt> get <Block or Semi> <Access Opt> set <Block or Semi>
            @Accessordec_Set = 311,                    // <Accessor Dec> ::= <Access Opt> set <Block or Semi>
            @Accessordec_Set_Get = 312,                // <Accessor Dec> ::= <Access Opt> set <Block or Semi> <Access Opt> get <Block or Semi>
            @Eventdec_Event_Semi = 313,                // <Event Dec> ::= <Header> event <Type> <Variable Decs> ';'
            @Eventdec_Event_Lbrace_Rbrace = 314,       // <Event Dec> ::= <Header> event <Type> <Qualified ID> '{' <Event Accessor Decs> '}'
            @Eventaccessordecs_Add = 315,              // <Event Accessor Decs> ::= add <Block or Semi>
            @Eventaccessordecs_Add_Remove = 316,       // <Event Accessor Decs> ::= add <Block or Semi> remove <Block or Semi>
            @Eventaccessordecs_Remove = 317,           // <Event Accessor Decs> ::= remove <Block or Semi>
            @Eventaccessordecs_Remove_Add = 318,       // <Event Accessor Decs> ::= remove <Block or Semi> add <Block or Semi>
            @Indexerdec_Lbracket_Rbracket_Lbrace_Rbrace = 319,  // <Indexer Dec> ::= <Header> <Type> <Qualified ID> '[' <Formal Param List> ']' '{' <Accessor Dec> '}'
            @Operatordec = 320,                        // <Operator Dec> ::= <Header> <Overload Operator Decl> <Block or Semi>
            @Operatordec2 = 321,                       // <Operator Dec> ::= <Header> <Conversion Operator Decl> <Block or Semi>
            @Overloadoperatordecl_Operator_Lparen_Identifier_Rparen = 322,  // <Overload Operator Decl> ::= <Type> operator <Overload Op> '(' <Type> Identifier ')'
            @Overloadoperatordecl_Operator_Lparen_Identifier_Comma_Identifier_Rparen = 323,  // <Overload Operator Decl> ::= <Type> operator <Overload Op> '(' <Type> Identifier ',' <Type> Identifier ')'
            @Conversionoperatordecl_Implicit_Operator_Lparen_Identifier_Rparen = 324,  // <Conversion Operator Decl> ::= implicit operator <Type> '(' <Type> Identifier ')'
            @Conversionoperatordecl_Explicit_Operator_Lparen_Identifier_Rparen = 325,  // <Conversion Operator Decl> ::= explicit operator <Type> '(' <Type> Identifier ')'
            @Overloadop_Plus = 326,                    // <Overload Op> ::= '+'
            @Overloadop_Minus = 327,                   // <Overload Op> ::= '-'
            @Overloadop_Exclam = 328,                  // <Overload Op> ::= '!'
            @Overloadop_Tilde = 329,                   // <Overload Op> ::= '~'
            @Overloadop_Plusplus = 330,                // <Overload Op> ::= '++'
            @Overloadop_Minusminus = 331,              // <Overload Op> ::= '--'
            @Overloadop_True = 332,                    // <Overload Op> ::= true
            @Overloadop_False = 333,                   // <Overload Op> ::= false
            @Overloadop_Times = 334,                   // <Overload Op> ::= '*'
            @Overloadop_Div = 335,                     // <Overload Op> ::= '/'
            @Overloadop_Percent = 336,                 // <Overload Op> ::= '%'
            @Overloadop_Amp = 337,                     // <Overload Op> ::= '&'
            @Overloadop_Pipe = 338,                    // <Overload Op> ::= '|'
            @Overloadop_Caret = 339,                   // <Overload Op> ::= '^'
            @Overloadop_Ltlt = 340,                    // <Overload Op> ::= '<<'
            @Overloadop_Gtgt = 341,                    // <Overload Op> ::= '>>'
            @Overloadop_Eqeq = 342,                    // <Overload Op> ::= '=='
            @Overloadop_Exclameq = 343,                // <Overload Op> ::= '!='
            @Overloadop_Gt = 344,                      // <Overload Op> ::= '>'
            @Overloadop_Lt = 345,                      // <Overload Op> ::= '<'
            @Overloadop_Gteq = 346,                    // <Overload Op> ::= '>='
            @Overloadop_Lteq = 347,                    // <Overload Op> ::= '<='
            @Constructordec = 348,                     // <Constructor Dec> ::= <Header> <Constructor Declarator> <Block or Semi>
            @Constructordeclarator_Identifier_Lparen_Rparen = 349,  // <Constructor Declarator> ::= Identifier '(' <Formal Param List Opt> ')' <Constructor Init Opt>
            @Constructorinitopt = 350,                 // <Constructor Init Opt> ::= <Constructor Init>
            @Constructorinitopt2 = 351,                // <Constructor Init Opt> ::= 
            @Constructorinit_Colon_Base_Lparen_Rparen = 352,  // <Constructor Init> ::= ':' base '(' <Arg List Opt> ')'
            @Constructorinit_Colon_This_Lparen_Rparen = 353,  // <Constructor Init> ::= ':' this '(' <Arg List Opt> ')'
            @Destructordec_Tilde_Identifier_Lparen_Rparen = 354,  // <Destructor Dec> ::= <Header> '~' Identifier '(' ')' <Block>
            @Structdecl_Struct_Identifier_Lbrace_Rbrace = 355,  // <Struct Decl> ::= <Header> struct Identifier <Class Base Opt> '{' <Class Item Decs Opt> '}' <Semicolon Opt>
            @Arrayinitializeropt = 356,                // <Array Initializer Opt> ::= <Array Initializer>
            @Arrayinitializeropt2 = 357,               // <Array Initializer Opt> ::= 
            @Arrayinitializer_Lbrace_Rbrace = 358,     // <Array Initializer> ::= '{' <Variable Initializer List Opt> '}'
            @Arrayinitializer_Lbrace_Comma_Rbrace = 359,  // <Array Initializer> ::= '{' <Variable Initializer List> ',' '}'
            @Variableinitializerlistopt = 360,         // <Variable Initializer List Opt> ::= <Variable Initializer List>
            @Variableinitializerlistopt2 = 361,        // <Variable Initializer List Opt> ::= 
            @Variableinitializerlist = 362,            // <Variable Initializer List> ::= <Variable Initializer>
            @Variableinitializerlist_Comma = 363,      // <Variable Initializer List> ::= <Variable Initializer List> ',' <Variable Initializer>
            @Interfacedecl_Interface_Identifier_Lbrace_Rbrace = 364,  // <Interface Decl> ::= <Header> interface Identifier <Interface Base Opt> '{' <Interface Item Decs Opt> '}' <Semicolon Opt>
            @Interfacebaseopt_Colon = 365,             // <Interface Base Opt> ::= ':' <Class Base List>
            @Interfacebaseopt = 366,                   // <Interface Base Opt> ::= 
            @Interfaceitemdecsopt = 367,               // <Interface Item Decs Opt> ::= <Interface Item Decs Opt> <Interface Item Dec>
            @Interfaceitemdecsopt2 = 368,              // <Interface Item Decs Opt> ::= 
            @Interfaceitemdec = 369,                   // <Interface Item Dec> ::= <Interface Method Dec>
            @Interfaceitemdec2 = 370,                  // <Interface Item Dec> ::= <Interface Property Dec>
            @Interfaceitemdec3 = 371,                  // <Interface Item Dec> ::= <Interface Event Dec>
            @Interfaceitemdec4 = 372,                  // <Interface Item Dec> ::= <Interface Indexer Dec>
            @Interfacemethoddec_Identifier_Lparen_Rparen = 373,  // <Interface Method Dec> ::= <Attrib Opt> <New Opt> <Type> Identifier '(' <Formal Param List Opt> ')' <Interface Empty Body>
            @Newopt_New = 374,                         // <New Opt> ::= new
            @Newopt = 375,                             // <New Opt> ::= 
            @Interfacepropertydec_Identifier_Lbrace_Rbrace = 376,  // <Interface Property Dec> ::= <Attrib Opt> <New Opt> <Type> Identifier '{' <Interface Accessors> '}'
            @Interfaceindexerdec_This_Lbracket_Rbracket_Lbrace_Rbrace = 377,  // <Interface Indexer Dec> ::= <Attrib Opt> <New Opt> <Type> this '[' <Formal Param List> ']' '{' <Interface Accessors> '}'
            @Interfaceaccessors_Get = 378,             // <Interface Accessors> ::= <Attrib Opt> <Access Opt> get <Interface Empty Body>
            @Interfaceaccessors_Set = 379,             // <Interface Accessors> ::= <Attrib Opt> <Access Opt> set <Interface Empty Body>
            @Interfaceaccessors_Get_Set = 380,         // <Interface Accessors> ::= <Attrib Opt> <Access Opt> get <Interface Empty Body> <Attrib Opt> <Access Opt> set <Interface Empty Body>
            @Interfaceaccessors_Set_Get = 381,         // <Interface Accessors> ::= <Attrib Opt> <Access Opt> set <Interface Empty Body> <Attrib Opt> <Access Opt> get <Interface Empty Body>
            @Interfaceeventdec_Event_Identifier = 382,  // <Interface Event Dec> ::= <Attrib Opt> <New Opt> event <Type> Identifier <Interface Empty Body>
            @Interfaceemptybody_Semi = 383,            // <Interface Empty Body> ::= ';'
            @Interfaceemptybody_Lbrace_Rbrace = 384,   // <Interface Empty Body> ::= '{' '}'
            @Enumdecl_Enum_Identifier = 385,           // <Enum Decl> ::= <Header> enum Identifier <Enum Base Opt> <Enum Body> <Semicolon Opt>
            @Enumbaseopt_Colon = 386,                  // <Enum Base Opt> ::= ':' <Integral Type>
            @Enumbaseopt = 387,                        // <Enum Base Opt> ::= 
            @Enumbody_Lbrace_Rbrace = 388,             // <Enum Body> ::= '{' <Enum Item Decs Opt> '}'
            @Enumbody_Lbrace_Comma_Rbrace = 389,       // <Enum Body> ::= '{' <Enum Item Decs> ',' '}'
            @Enumitemdecsopt = 390,                    // <Enum Item Decs Opt> ::= <Enum Item Decs>
            @Enumitemdecsopt2 = 391,                   // <Enum Item Decs Opt> ::= 
            @Enumitemdecs = 392,                       // <Enum Item Decs> ::= <Enum Item Dec>
            @Enumitemdecs_Comma = 393,                 // <Enum Item Decs> ::= <Enum Item Decs> ',' <Enum Item Dec>
            @Enumitemdec_Identifier = 394,             // <Enum Item Dec> ::= <Attrib Opt> Identifier
            @Enumitemdec_Identifier_Eq = 395,          // <Enum Item Dec> ::= <Attrib Opt> Identifier '=' <Expression>
            @Delegatedecl_Delegate_Identifier_Lparen_Rparen_Semi = 396,  // <Delegate Decl> ::= <Header> delegate <Type> Identifier '(' <Formal Param List Opt> ')' ';'
            @Attribopt = 397,                          // <Attrib Opt> ::= <Attrib Opt> <Attrib Section>
            @Attribopt2 = 398,                         // <Attrib Opt> ::= 
            @Attribsection_Lbracket_Rbracket = 399,    // <Attrib Section> ::= '[' <Attrib Target Spec Opt> <Attrib List> ']'
            @Attribsection_Lbracket_Comma_Rbracket = 400,  // <Attrib Section> ::= '[' <Attrib Target Spec Opt> <Attrib List> ',' ']'
            @Attribtargetspecopt_Assembly_Colon = 401,  // <Attrib Target Spec Opt> ::= assembly ':'
            @Attribtargetspecopt_Field_Colon = 402,    // <Attrib Target Spec Opt> ::= field ':'
            @Attribtargetspecopt_Event_Colon = 403,    // <Attrib Target Spec Opt> ::= event ':'
            @Attribtargetspecopt_Method_Colon = 404,   // <Attrib Target Spec Opt> ::= method ':'
            @Attribtargetspecopt_Module_Colon = 405,   // <Attrib Target Spec Opt> ::= module ':'
            @Attribtargetspecopt_Param_Colon = 406,    // <Attrib Target Spec Opt> ::= param ':'
            @Attribtargetspecopt_Property_Colon = 407,  // <Attrib Target Spec Opt> ::= property ':'
            @Attribtargetspecopt_Return_Colon = 408,   // <Attrib Target Spec Opt> ::= return ':'
            @Attribtargetspecopt_Type_Colon = 409,     // <Attrib Target Spec Opt> ::= type ':'
            @Attribtargetspecopt = 410,                // <Attrib Target Spec Opt> ::= 
            @Attriblist = 411,                         // <Attrib List> ::= <Attribute>
            @Attriblist_Comma = 412,                   // <Attrib List> ::= <Attrib List> ',' <Attribute>
            @Attribute_Lparen_Rparen = 413,            // <Attribute> ::= <Qualified ID> '(' <Expression List> ')'
            @Attribute_Lparen_Rparen2 = 414,           // <Attribute> ::= <Qualified ID> '(' ')'
            @Attribute = 415                           // <Attribute> ::= <Qualified ID>
        }

        public object program;     //You might derive a specific object

        public void Setup()
        {
            //This procedure can be called to load the parse tables. The class can
            //read tables using a BinaryReader.

            BinaryReader reader = new BinaryReader(File.OpenText("remix.egt").BaseStream);
            parser.LoadTables(reader);
        }

        public bool Parse(TextReader reader)
        {
            //This procedure starts the GOLD Parser Engine and handles each of the
            //messages it returns. Each time a reduction is made, you can create new
            //custom object and reassign the .CurrentReduction property. Otherwise, 
            //the system will use the Reduction object that was returned.
            //
            //The resulting tree will be a pure representation of the language 
            //and will be ready to implement.

            GOLD.ParseMessage response;
            bool done;                      //Controls when we leave the loop
            bool accepted = false;          //Was the parse successful?

            parser.Open(reader);
            parser.TrimReductions = false;  //Please read about this feature before enabling  

            done = false;
            while (!done)
            {
                response = parser.Parse();
                switch (response)
                {
                    case GOLD.ParseMessage.LexicalError:
                        //Cannot recognize token
                        done = true;
                        break;

                    case GOLD.ParseMessage.SyntaxError:
                        //Expecting a different token
                        done = true;
                        break;

                    case GOLD.ParseMessage.Reduction:
                        //Create a customized object to store the reduction

                        parser.CurrentReduction = CreateNewObject(parser.CurrentReduction as GOLD.Reduction);
                        break;

                    case GOLD.ParseMessage.Accept:
                        //Accepted!
                        //program = parser.CurrentReduction   //The root node!                 
                        done = true;
                        accepted = true;
                        break;

                    case GOLD.ParseMessage.TokenRead:
                        break;

                    case GOLD.ParseMessage.InternalError:
                        //INTERNAL ERROR! Something is horribly wrong.
                        done = true;
                        break;

                    case GOLD.ParseMessage.NotLoadedError:
                        //This error occurs if the CGT was not loaded.                   
                        done = true;
                        break;

                    case GOLD.ParseMessage.GroupError:
                        //GROUP ERROR! Unexpected end of file
                        done = true;
                        break;
                }
            } //while

            return accepted;
        }

        private object CreateNewObject(GOLD.Reduction r)
        {
            object result = null;
            ProductionIndex index = (ProductionIndex)r.Parent.TableIndex();
            
            switch (index)
            {
                
                case ProductionIndex.Blockorsemi:
                    
                    // <Block or Semi> ::= <Block>
                    break;

                case ProductionIndex.Blockorsemi_Semi:
                    // <Block or Semi> ::= ';'
                    break;

                case ProductionIndex.Validid_Identifier:

                    Utilities.MethodHandler.Process();
                    
                    string func = r.get_Data(0).ToString();
                    Type type = typeof(Functions.System);
                    MethodInfo method = type.GetMethod(func);

                    if (method != null)
                    {
                        Containers.Storage.MethodCalls.Add(new Tuple<string, Type>(func, type));
                    }

                    // <Valid ID> ::= Identifier
                    break;

                case ProductionIndex.Validid_This:

                    // <Valid ID> ::= this/
                    break;

                case ProductionIndex.Validid_Base:
                    // <Valid ID> ::= base
                    break;

                case ProductionIndex.Validid:
                    
                    // <Valid ID> ::= <Base Type>
                    break;

                case ProductionIndex.Qualifiedid:

                    // <Qualified ID> ::= <Valid ID> <Member List>
                    break;

                case ProductionIndex.Memberlist_Membername:

                    // <Member List> ::= <Member List> MemberName
                    break;

                case ProductionIndex.Memberlist:

                    // <Member List> ::= 
                    break;

                case ProductionIndex.Semicolonopt_Semi:
                    // <Semicolon Opt> ::= ';'
                    break;

                case ProductionIndex.Semicolonopt:
                    // <Semicolon Opt> ::= 
                    break;

                case ProductionIndex.Literal_True:
                    // <Literal> ::= true
                    break;

                case ProductionIndex.Literal_False:
                    // <Literal> ::= false
                    break;

                case ProductionIndex.Literal_Decliteral:
                    // <Literal> ::= DecLiteral
                    break;

                case ProductionIndex.Literal_Hexliteral:
                    // <Literal> ::= HexLiteral
                    break;

                case ProductionIndex.Literal_Realliteral:
                    // <Literal> ::= RealLiteral
                    break;

                case ProductionIndex.Literal_Charliteral:
                    // <Literal> ::= CharLiteral
                    break;

                case ProductionIndex.Literal_Stringliteral:
                    // USE THIS
                    Containers.Storage.StringLiterals.Add(r.get_Data(0).ToString());
                    // <Literal> ::= StringLiteral
                    break;

                case ProductionIndex.Literal_Null:
                    // <Literal> ::= null
                    break;

                case ProductionIndex.Type:
                    
                    // <Type> ::= <Non Array Type>
                    break;

                case ProductionIndex.Type_Times:
                    // <Type> ::= <Non Array Type> '*'
                    break;

                case ProductionIndex.Type2:

                    // <Type> ::= <Non Array Type> <Rank Specifiers>
                    break;

                case ProductionIndex.Type_Times2:
                    // <Type> ::= <Non Array Type> <Rank Specifiers> '*'
                    break;

                case ProductionIndex.Pointeropt_Times:
                    // <Pointer Opt> ::= '*'
                    break;

                case ProductionIndex.Pointeropt:
                    // <Pointer Opt> ::= 
                    break;

                case ProductionIndex.Nonarraytype:
                    // <Non Array Type> ::= <Qualified ID>
                    break;

                case ProductionIndex.Basetype:

                    // <Base Type> ::= <Other Type>
                    break;

                case ProductionIndex.Basetype2:
                    // <Base Type> ::= <Integral Type>
                    break;

                case ProductionIndex.Othertype_Float:
                    // <Other Type> ::= float
                    break;

                case ProductionIndex.Othertype_Double:
                    // <Other Type> ::= double
                    break;

                case ProductionIndex.Othertype_Decimal:
                    // <Other Type> ::= decimal
                    break;

                case ProductionIndex.Othertype_Bool:
                    // <Other Type> ::= bool
                    break;

                case ProductionIndex.Othertype_Void:
                    // <Other Type> ::= void
                    break;

                case ProductionIndex.Othertype_Object:
                    // <Other Type> ::= object
                    break;

                case ProductionIndex.Othertype_String:
                    
                    // <Other Type> ::= string
                    break;

                case ProductionIndex.Integraltype_Sbyte:
                    // <Integral Type> ::= sbyte
                    break;

                case ProductionIndex.Integraltype_Byte:
                    // <Integral Type> ::= byte
                    break;

                case ProductionIndex.Integraltype_Short:
                    // <Integral Type> ::= short
                    break;

                case ProductionIndex.Integraltype_Ushort:
                    // <Integral Type> ::= ushort
                    break;

                case ProductionIndex.Integraltype_Int:
                    // <Integral Type> ::= int
                    break;

                case ProductionIndex.Integraltype_Uint:
                    // <Integral Type> ::= uint
                    break;

                case ProductionIndex.Integraltype_Long:
                    // <Integral Type> ::= long
                    break;

                case ProductionIndex.Integraltype_Ulong:
                    // <Integral Type> ::= ulong
                    break;

                case ProductionIndex.Integraltype_Char:
                    // <Integral Type> ::= char
                    break;

                case ProductionIndex.Rankspecifiersopt:
                    // <Rank Specifiers Opt> ::= <Rank Specifiers Opt> <Rank Specifier>
                    break;

                case ProductionIndex.Rankspecifiersopt2:
                    // <Rank Specifiers Opt> ::= 
                    break;

                case ProductionIndex.Rankspecifiers:
                    // <Rank Specifiers> ::= <Rank Specifiers> <Rank Specifier>
                    break;

                case ProductionIndex.Rankspecifiers2:
                    // <Rank Specifiers> ::= <Rank Specifier>
                    break;

                case ProductionIndex.Rankspecifier_Lbracket_Rbracket:
                    // <Rank Specifier> ::= '[' <Dim Separators> ']'
                    break;

                case ProductionIndex.Dimseparators_Comma:
                    // <Dim Separators> ::= <Dim Separators> ','
                    break;

                case ProductionIndex.Dimseparators:
                    
                    // <Dim Separators> ::= 
                    break;

                case ProductionIndex.Expressionopt:

                    // <Expression Opt> ::= <Expression>
                    break;

                case ProductionIndex.Expressionopt2:
                    // <Expression Opt> ::= 
                    break;

                case ProductionIndex.Expressionlist:
                    // <Expression List> ::= <Expression>
                    break;

                case ProductionIndex.Expressionlist_Comma:
                    // <Expression List> ::= <Expression> ',' <Expression List>
                    break;

                case ProductionIndex.Expression_Eq:
                    
                    // <Expression> ::= <Conditional Exp> '=' <Expression>
                    break;

                case ProductionIndex.Expression_Pluseq:
                    // <Expression> ::= <Conditional Exp> '+=' <Expression>
                    break;

                case ProductionIndex.Expression_Minuseq:
                    // <Expression> ::= <Conditional Exp> '-=' <Expression>
                    break;

                case ProductionIndex.Expression_Timeseq:
                    // <Expression> ::= <Conditional Exp> '*=' <Expression>
                    break;

                case ProductionIndex.Expression_Diveq:
                    // <Expression> ::= <Conditional Exp> '/=' <Expression>
                    break;

                case ProductionIndex.Expression_Careteq:
                    // <Expression> ::= <Conditional Exp> '^=' <Expression>
                    break;

                case ProductionIndex.Expression_Ampeq:
                    // <Expression> ::= <Conditional Exp> '&=' <Expression>
                    break;

                case ProductionIndex.Expression_Pipeeq:
                    // <Expression> ::= <Conditional Exp> '|=' <Expression>
                    break;

                case ProductionIndex.Expression_Percenteq:
                    // <Expression> ::= <Conditional Exp> '%=' <Expression>
                    break;

                case ProductionIndex.Expression_Ltlteq:
                    // <Expression> ::= <Conditional Exp> '<<=' <Expression>
                    break;

                case ProductionIndex.Expression_Gtgteq:
                    // <Expression> ::= <Conditional Exp> '>>=' <Expression>
                    break;

                case ProductionIndex.Expression:
                    
                    // <Expression> ::= <Conditional Exp>
                    break;

                case ProductionIndex.Conditionalexp_Question_Colon:
                    // <Conditional Exp> ::= <Or Exp> '?' <Or Exp> ':' <Conditional Exp>
                    break;

                case ProductionIndex.Conditionalexp:
                    // <Conditional Exp> ::= <Or Exp>
                    break;

                case ProductionIndex.Orexp_Pipepipe:
                    // <Or Exp> ::= <Or Exp> '||' <And Exp>
                    break;

                case ProductionIndex.Orexp:
                    // <Or Exp> ::= <And Exp>
                    break;

                case ProductionIndex.Andexp_Ampamp:
                    // <And Exp> ::= <And Exp> '&&' <Logical Or Exp>
                    break;

                case ProductionIndex.Andexp:
                    // <And Exp> ::= <Logical Or Exp>
                    break;

                case ProductionIndex.Logicalorexp_Pipe:
                    // <Logical Or Exp> ::= <Logical Or Exp> '|' <Logical Xor Exp>
                    break;

                case ProductionIndex.Logicalorexp:
                    // <Logical Or Exp> ::= <Logical Xor Exp>
                    break;

                case ProductionIndex.Logicalxorexp_Caret:
                    // <Logical Xor Exp> ::= <Logical Xor Exp> '^' <Logical And Exp>
                    break;

                case ProductionIndex.Logicalxorexp:
                    // <Logical Xor Exp> ::= <Logical And Exp>
                    break;

                case ProductionIndex.Logicalandexp_Amp:
                    // <Logical And Exp> ::= <Logical And Exp> '&' <Equality Exp>
                    break;

                case ProductionIndex.Logicalandexp:
                    // <Logical And Exp> ::= <Equality Exp>
                    break;

                case ProductionIndex.Equalityexp_Eqeq:

                    // <Equality Exp> ::= <Equality Exp> '==' <Compare Exp>
                    break;

                case ProductionIndex.Equalityexp_Exclameq:
                    // <Equality Exp> ::= <Equality Exp> '!=' <Compare Exp>
                    break;

                case ProductionIndex.Equalityexp:
                    
                    // <Equality Exp> ::= <Compare Exp>
                    break;

                case ProductionIndex.Compareexp_Lt:
                    // <Compare Exp> ::= <Compare Exp> '<' <Shift Exp>
                    break;

                case ProductionIndex.Compareexp_Gt:
                    // <Compare Exp> ::= <Compare Exp> '>' <Shift Exp>
                    break;

                case ProductionIndex.Compareexp_Lteq:
                    // <Compare Exp> ::= <Compare Exp> '<=' <Shift Exp>
                    break;

                case ProductionIndex.Compareexp_Gteq:
                    // <Compare Exp> ::= <Compare Exp> '>=' <Shift Exp>
                    break;

                case ProductionIndex.Compareexp_Is:
                    // <Compare Exp> ::= <Compare Exp> is <Type>
                    break;

                case ProductionIndex.Compareexp_As:
                    // <Compare Exp> ::= <Compare Exp> as <Type>
                    break;

                case ProductionIndex.Compareexp:
                    // <Compare Exp> ::= <Shift Exp>
                    break;

                case ProductionIndex.Shiftexp_Ltlt:
                    // <Shift Exp> ::= <Shift Exp> '<<' <Add Exp>
                    break;

                case ProductionIndex.Shiftexp_Gtgt:
                    // <Shift Exp> ::= <Shift Exp> '>>' <Add Exp>
                    break;

                case ProductionIndex.Shiftexp:
                    // <Shift Exp> ::= <Add Exp>
                    break;

                case ProductionIndex.Addexp_Plus:
                    // <Add Exp> ::= <Add Exp> '+' <Mult Exp>
                    break;

                case ProductionIndex.Addexp_Minus:
                    // <Add Exp> ::= <Add Exp> '-' <Mult Exp>
                    break;

                case ProductionIndex.Addexp:
                    // <Add Exp> ::= <Mult Exp>
                    break;

                case ProductionIndex.Multexp_Times:
                    // <Mult Exp> ::= <Mult Exp> '*' <Unary Exp>
                    break;

                case ProductionIndex.Multexp_Div:
                    // <Mult Exp> ::= <Mult Exp> '/' <Unary Exp>
                    break;

                case ProductionIndex.Multexp_Percent:
                    // <Mult Exp> ::= <Mult Exp> '%' <Unary Exp>
                    break;

                case ProductionIndex.Multexp:
                    // <Mult Exp> ::= <Unary Exp>
                    break;

                case ProductionIndex.Unaryexp_Exclam:
                    // <Unary Exp> ::= '!' <Unary Exp>
                    break;

                case ProductionIndex.Unaryexp_Tilde:
                    // <Unary Exp> ::= '~' <Unary Exp>
                    break;

                case ProductionIndex.Unaryexp_Minus:
                    // <Unary Exp> ::= '-' <Unary Exp>
                    break;

                case ProductionIndex.Unaryexp_Plusplus:
                    // <Unary Exp> ::= '++' <Unary Exp>
                    break;

                case ProductionIndex.Unaryexp_Minusminus:
                    // <Unary Exp> ::= '--' <Unary Exp>
                    break;

                case ProductionIndex.Unaryexp_Lparen_Rparen:
                    // <Unary Exp> ::= '(' <Expression> ')' <Object Exp>
                    break;

                case ProductionIndex.Unaryexp:
                    // <Unary Exp> ::= <Object Exp>
                    break;

                case ProductionIndex.Objectexp_Delegate_Lparen_Rparen:
                    // <Object Exp> ::= delegate '(' <Formal Param List Opt> ')' <Block>
                    break;

                case ProductionIndex.Objectexp:
                    
                    // <Object Exp> ::= <Primary Array Creation Exp>
                    break;

                case ProductionIndex.Objectexp2:
                    // <Object Exp> ::= <Method Exp>
                    break;

                case ProductionIndex.Primaryarraycreationexp_New_Lbracket_Rbracket:
                    // <Primary Array Creation Exp> ::= new <Non Array Type> '[' <Expression List> ']' <Rank Specifiers Opt> <Array Initializer Opt>
                    break;

                case ProductionIndex.Primaryarraycreationexp_New:
                    // <Primary Array Creation Exp> ::= new <Non Array Type> <Rank Specifiers> <Array Initializer>
                    break;

                case ProductionIndex.Methodexp:
                   
                    // <Method Exp> ::= <Method Exp> <Method>
                    break;

                case ProductionIndex.Methodexp2:
                    // <Method Exp> ::= <Primary Exp>
                    break;

                case ProductionIndex.Primaryexp_Typeof_Lparen_Rparen:
                    // <Primary Exp> ::= typeof '(' <Type> ')'
                    break;

                case ProductionIndex.Primaryexp_Sizeof_Lparen_Rparen:
                    // <Primary Exp> ::= sizeof '(' <Type> ')'
                    break;

                case ProductionIndex.Primaryexp_Checked_Lparen_Rparen:
                    // <Primary Exp> ::= checked '(' <Expression> ')'
                    break;

                case ProductionIndex.Primaryexp_Unchecked_Lparen_Rparen:
                    // <Primary Exp> ::= unchecked '(' <Expression> ')'
                    break;

                case ProductionIndex.Primaryexp_New_Lparen_Rparen:
                    // <Primary Exp> ::= new <Non Array Type> '(' <Arg List Opt> ')'
                    break;

                case ProductionIndex.Primaryexp:
                    
                    // <Primary Exp> ::= <Primary>
                    break;

                case ProductionIndex.Primaryexp_Lparen_Rparen:
                    // <Primary Exp> ::= '(' <Expression> ')'
                    break;

                case ProductionIndex.Primary:
                                      // <Primary> ::= <Valid ID>
                    break;

                case ProductionIndex.Primary_Lparen_Rparen:
                    // <Primary> ::= <Valid ID> '(' <Arg List Opt> ')'
                    break;

                case ProductionIndex.Primary2:
                    // <Primary> ::= <Literal>
                    break;

                case ProductionIndex.Arglistopt:
                    // <Arg List Opt> ::= <Arg List>
                    break;

                case ProductionIndex.Arglistopt2:
                    // <Arg List Opt> ::= 
                    break;

                case ProductionIndex.Arglist_Comma:
                    // <Arg List> ::= <Arg List> ',' <Argument>
                    break;

                case ProductionIndex.Arglist:
                    // <Arg List> ::= <Argument>
                    break;

                case ProductionIndex.Argument:
                    // <Argument> ::= <Expression>
                    break;

                case ProductionIndex.Argument_Ref:
                    // <Argument> ::= ref <Expression>
                    break;

                case ProductionIndex.Argument_Out:
                    // <Argument> ::= out <Expression>
                    break;

                case ProductionIndex.Stmlist:

                    // <Stm List> ::= <Stm List> <Statement>
                    break;

                case ProductionIndex.Stmlist2:
                    // <Stm List> ::= <Statement>
                    break;

                case ProductionIndex.Statement_Identifier_Colon:
                    // <Statement> ::= Identifier ':'
                    break;

                case ProductionIndex.Statement_Semi:
                    // <Statement> ::= <Local Var Decl> ';'
                    break;

                case ProductionIndex.Statement_If_Lparen_Rparen:
                    // <Statement> ::= if '(' <Expression> ')' <Statement>
                    break;

                case ProductionIndex.Statement_If_Lparen_Rparen_Else:
                    // <Statement> ::= if '(' <Expression> ')' <Then Stm> else <Statement>
                    break;

                case ProductionIndex.Statement_For_Lparen_Semi_Semi_Rparen:
                    // <Statement> ::= for '(' <For Init Opt> ';' <For Condition Opt> ';' <For Iterator Opt> ')' <Statement>
                    break;

                case ProductionIndex.Statement_Foreach_Lparen_Identifier_In_Rparen:
                    // <Statement> ::= foreach '(' <Type> Identifier in <Expression> ')' <Statement>
                    break;

                case ProductionIndex.Statement_While_Lparen_Rparen:
                    // <Statement> ::= while '(' <Expression> ')' <Statement>
                    break;

                case ProductionIndex.Statement_Lock_Lparen_Rparen:
                    // <Statement> ::= lock '(' <Expression> ')' <Statement>
                    break;

                case ProductionIndex.Statement_Using_Lparen_Rparen:
                    // <Statement> ::= using '(' <Resource> ')' <Statement>
                    break;

                case ProductionIndex.Statement_Fixed_Lparen_Rparen:
                    // <Statement> ::= fixed '(' <Type> <Fixed Ptr Decs> ')' <Statement>
                    break;

                case ProductionIndex.Statement_Delegate_Lparen_Rparen:
                    // <Statement> ::= delegate '(' <Formal Param List Opt> ')' <Statement>
                    break;

                case ProductionIndex.Statement:

                    // <Statement> ::= <Normal Stm>
                    break;

                case ProductionIndex.Thenstm_If_Lparen_Rparen_Else:
                    // <Then Stm> ::= if '(' <Expression> ')' <Then Stm> else <Then Stm>
                    break;

                case ProductionIndex.Thenstm_For_Lparen_Semi_Semi_Rparen:
                    // <Then Stm> ::= for '(' <For Init Opt> ';' <For Condition Opt> ';' <For Iterator Opt> ')' <Then Stm>
                    break;

                case ProductionIndex.Thenstm_Foreach_Lparen_Identifier_In_Rparen:
                    // <Then Stm> ::= foreach '(' <Type> Identifier in <Expression> ')' <Then Stm>
                    break;

                case ProductionIndex.Thenstm_While_Lparen_Rparen:
                    // <Then Stm> ::= while '(' <Expression> ')' <Then Stm>
                    break;

                case ProductionIndex.Thenstm_Lock_Lparen_Rparen:
                    // <Then Stm> ::= lock '(' <Expression> ')' <Then Stm>
                    break;

                case ProductionIndex.Thenstm_Using_Lparen_Rparen:
                    // <Then Stm> ::= using '(' <Resource> ')' <Then Stm>
                    break;

                case ProductionIndex.Thenstm_Fixed_Lparen_Rparen:
                    // <Then Stm> ::= fixed '(' <Type> <Fixed Ptr Decs> ')' <Then Stm>
                    break;

                case ProductionIndex.Thenstm_Delegate_Lparen_Rparen:
                    // <Then Stm> ::= delegate '(' <Formal Param List Opt> ')' <Then Stm>
                    break;

                case ProductionIndex.Thenstm:
                    // <Then Stm> ::= <Normal Stm>
                    break;

                case ProductionIndex.Normalstm_Switch_Lparen_Rparen_Lbrace_Rbrace:
                    // <Normal Stm> ::= switch '(' <Expression> ')' '{' <Switch Sections Opt> '}'
                    break;

                case ProductionIndex.Normalstm_Do_While_Lparen_Rparen_Semi:
                    // <Normal Stm> ::= do <Normal Stm> while '(' <Expression> ')' ';'
                    break;

                case ProductionIndex.Normalstm_Try:
                    // <Normal Stm> ::= try <Block> <Catch Clauses> <Finally Clause Opt>
                    break;

                case ProductionIndex.Normalstm_Checked:
                    // <Normal Stm> ::= checked <Block>
                    break;

                case ProductionIndex.Normalstm_Unchecked:
                    // <Normal Stm> ::= unchecked <Block>
                    break;

                case ProductionIndex.Normalstm_Unsafe:
                    // <Normal Stm> ::= unsafe <Block>
                    break;

                case ProductionIndex.Normalstm_Break_Semi:
                    // <Normal Stm> ::= break ';'
                    break;

                case ProductionIndex.Normalstm_Continue_Semi:
                    // <Normal Stm> ::= continue ';'
                    break;

                case ProductionIndex.Normalstm_Goto_Identifier_Semi:
                    // <Normal Stm> ::= goto Identifier ';'
                    break;

                case ProductionIndex.Normalstm_Goto_Case_Semi:
                    // <Normal Stm> ::= goto case <Expression> ';'
                    break;

                case ProductionIndex.Normalstm_Goto_Default_Semi:
                    // <Normal Stm> ::= goto default ';'
                    break;

                case ProductionIndex.Normalstm_Return_Semi:
                    // <Normal Stm> ::= return <Expression Opt> ';'
                    break;

                case ProductionIndex.Normalstm_Throw_Semi:
                    // <Normal Stm> ::= throw <Expression Opt> ';'
                    break;

                case ProductionIndex.Normalstm_Semi:

                    // <Normal Stm> ::= <Statement Exp> ';'
                    break;

                case ProductionIndex.Normalstm_Semi2:

                    // <Normal Stm> ::= ';'
                    break;

                case ProductionIndex.Normalstm:

                    // <Normal Stm> ::= <Block>
                    break;

                case ProductionIndex.Block_Lbrace_Rbrace:
                    Utilities.MethodHandler.Process();
                    // <Block> ::= '{' <Stm List> '}'
                    break;

                case ProductionIndex.Block_Lbrace_Rbrace2:
                    
                    // <Block> ::= '{' '}'
                    break;

                case ProductionIndex.Variabledecs:
                  
                    // <Variable Decs> ::= <Variable Declarator>
                    break;

                case ProductionIndex.Variabledecs_Comma:
                    
                    // <Variable Decs> ::= <Variable Decs> ',' <Variable Declarator>
                    break;

                case ProductionIndex.Variabledeclarator_Identifier:
                  
                    // <Variable Declarator> ::= Identifier
                    break;

                case ProductionIndex.Variabledeclarator_Identifier_Eq:
                  
                    // USE THIS

                    // <Variable Declarator> ::= Identifier '=' <Variable Initializer>
                    break;

                case ProductionIndex.Variableinitializer:

                  
                    // <Variable Initializer> ::= <Expression>
                    break;

                case ProductionIndex.Variableinitializer2:
                  
                    // <Variable Initializer> ::= <Array Initializer>
                    break;

                case ProductionIndex.Variableinitializer_Stackalloc_Lbracket_Rbracket:

                    // <Variable Initializer> ::= stackalloc <Non Array Type> '[' <Non Array Type> ']'
                    break;

                case ProductionIndex.Constantdeclarators:
                    // <Constant Declarators> ::= <Constant Declarator>
                    break;

                case ProductionIndex.Constantdeclarators_Comma:
                    // <Constant Declarators> ::= <Constant Declarators> ',' <Constant Declarator>
                    break;

                case ProductionIndex.Constantdeclarator_Identifier_Eq:
                  
                    // <Constant Declarator> ::= Identifier '=' <Expression>
                    break;

                case ProductionIndex.Switchsectionsopt:
                    // <Switch Sections Opt> ::= <Switch Sections Opt> <Switch Section>
                    break;

                case ProductionIndex.Switchsectionsopt2:
                    // <Switch Sections Opt> ::= 
                    break;

                case ProductionIndex.Switchsection:
                    // <Switch Section> ::= <Switch Labels> <Stm List>
                    break;

                case ProductionIndex.Switchlabels:
                    // <Switch Labels> ::= <Switch Label>
                    break;

                case ProductionIndex.Switchlabels2:
                    // <Switch Labels> ::= <Switch Labels> <Switch Label>
                    break;

                case ProductionIndex.Switchlabel_Case_Colon:
                    // <Switch Label> ::= case <Expression> ':'
                    break;

                case ProductionIndex.Switchlabel_Default_Colon:
                    // <Switch Label> ::= default ':'
                    break;

                case ProductionIndex.Forinitopt:
                    // <For Init Opt> ::= <Local Var Decl>
                    break;

                case ProductionIndex.Forinitopt2:
                    // <For Init Opt> ::= <Statement Exp List>
                    break;

                case ProductionIndex.Forinitopt3:
                    // <For Init Opt> ::= 
                    break;

                case ProductionIndex.Foriteratoropt:
                    // <For Iterator Opt> ::= <Statement Exp List>
                    break;

                case ProductionIndex.Foriteratoropt2:
                    // <For Iterator Opt> ::= 
                    break;

                case ProductionIndex.Forconditionopt:
                    // <For Condition Opt> ::= <Expression>
                    break;

                case ProductionIndex.Forconditionopt2:
                    // <For Condition Opt> ::= 
                    break;

                case ProductionIndex.Statementexplist_Comma:
                    // <Statement Exp List> ::= <Statement Exp List> ',' <Statement Exp>
                    break;

                case ProductionIndex.Statementexplist:
                    // <Statement Exp List> ::= <Statement Exp>
                    break;

                case ProductionIndex.Catchclauses:
                    // <Catch Clauses> ::= <Catch Clause> <Catch Clauses>
                    break;

                case ProductionIndex.Catchclauses2:
                    // <Catch Clauses> ::= 
                    break;

                case ProductionIndex.Catchclause_Catch_Lparen_Identifier_Rparen:
                    // <Catch Clause> ::= catch '(' <Qualified ID> Identifier ')' <Block>
                    break;

                case ProductionIndex.Catchclause_Catch_Lparen_Rparen:
                    // <Catch Clause> ::= catch '(' <Qualified ID> ')' <Block>
                    break;

                case ProductionIndex.Catchclause_Catch:
                    // <Catch Clause> ::= catch <Block>
                    break;

                case ProductionIndex.Finallyclauseopt_Finally:
                    // <Finally Clause Opt> ::= finally <Block>
                    break;

                case ProductionIndex.Finallyclauseopt:
                    // <Finally Clause Opt> ::= 
                    break;

                case ProductionIndex.Resource:
                  
                    // <Resource> ::= <Local Var Decl>
                    break;

                case ProductionIndex.Resource2:

                    // <Resource> ::= <Statement Exp>
                    break;

                case ProductionIndex.Fixedptrdecs:
                    // <Fixed Ptr Decs> ::= <Fixed Ptr Dec>
                    break;

                case ProductionIndex.Fixedptrdecs_Comma:
                    // <Fixed Ptr Decs> ::= <Fixed Ptr Decs> ',' <Fixed Ptr Dec>
                    break;

                case ProductionIndex.Fixedptrdec_Identifier_Eq:

                    // <Fixed Ptr Dec> ::= Identifier '=' <Expression>
                    break;

                case ProductionIndex.Localvardecl:
                    

                    // <Local Var Decl> ::= <Qualified ID> <Rank Specifiers> <Pointer Opt> <Variable Decs>
                    break;

                case ProductionIndex.Localvardecl2:

                    // <Local Var Decl> ::= <Qualified ID> <Pointer Opt> <Variable Decs>
                    break;

                case ProductionIndex.Statementexp_Lparen_Rparen:
                    // <Statement Exp> ::= <Qualified ID> '(' <Arg List Opt> ')'
                    break;

                case ProductionIndex.Statementexp_Lparen_Rparen2:
                    // <Statement Exp> ::= <Qualified ID> '(' <Arg List Opt> ')' <Methods Opt> <Assign Tail>
                    break;

                case ProductionIndex.Statementexp_Lbracket_Rbracket:
                    // <Statement Exp> ::= <Qualified ID> '[' <Expression List> ']' <Methods Opt> <Assign Tail>
                    break;

                case ProductionIndex.Statementexp_Minusgt_Identifier:
                    // <Statement Exp> ::= <Qualified ID> '->' Identifier <Methods Opt> <Assign Tail>
                    break;

                case ProductionIndex.Statementexp_Plusplus:
                    // <Statement Exp> ::= <Qualified ID> '++' <Methods Opt> <Assign Tail>
                    break;

                case ProductionIndex.Statementexp_Minusminus:
                    // <Statement Exp> ::= <Qualified ID> '--' <Methods Opt> <Assign Tail>
                    break;

                case ProductionIndex.Statementexp:

                    // <Statement Exp> ::= <Qualified ID> <Assign Tail>
                    break;

                case ProductionIndex.Assigntail_Plusplus:
                    // <Assign Tail> ::= '++'
                    break;

                case ProductionIndex.Assigntail_Minusminus:
                    // <Assign Tail> ::= '--'
                    break;

                // **  variable = value  ** (predefined type)
                case ProductionIndex.Assigntail_Eq:
                    // USE THIS
                    // <Assign Tail> ::= '=' <Expression>
                    break;
                
                // **  variable += value  ** (predefined type)
                case ProductionIndex.Assigntail_Pluseq:
                    // <Assign Tail> ::= '+=' <Expression>
                    break;

                case ProductionIndex.Assigntail_Minuseq:
                    // <Assign Tail> ::= '-=' <Expression>
                    break;

                case ProductionIndex.Assigntail_Timeseq:
                    // <Assign Tail> ::= '*=' <Expression>
                    break;

                case ProductionIndex.Assigntail_Diveq:
                    // <Assign Tail> ::= '/=' <Expression>
                    break;

                case ProductionIndex.Assigntail_Careteq:
                    // <Assign Tail> ::= '^=' <Expression>
                    break;

                case ProductionIndex.Assigntail_Ampeq:
                    // <Assign Tail> ::= '&=' <Expression>
                    break;

                case ProductionIndex.Assigntail_Pipeeq:
                    // <Assign Tail> ::= '|=' <Expression>
                    break;

                case ProductionIndex.Assigntail_Percenteq:
                    // <Assign Tail> ::= '%=' <Expression>
                    break;

                case ProductionIndex.Assigntail_Ltlteq:
                    
                    // <Assign Tail> ::= '<<=' <Expression>
                    break;

                case ProductionIndex.Assigntail_Gtgteq:
                    // <Assign Tail> ::= '>>=' <Expression>
                    break;

                case ProductionIndex.Methodsopt:
                    // <Methods Opt> ::= <Methods Opt> <Method>
                    break;

                case ProductionIndex.Methodsopt2:
                    // <Methods Opt> ::= 
                    break;

                case ProductionIndex.Method_Membername:
                    // <Method> ::= MemberName
                    break;

                case ProductionIndex.Method_Membername_Lparen_Rparen:
                    // <Method> ::= MemberName '(' <Arg List Opt> ')'
                    break;

                case ProductionIndex.Method_Lbracket_Rbracket:

                    // <Method> ::= '[' <Expression List> ']'
                    break;

                case ProductionIndex.Method_Minusgt_Identifier:
                    // <Method> ::= '->' Identifier
                    break;

                case ProductionIndex.Method_Plusplus:
                    // <Method> ::= '++'
                    break;

                case ProductionIndex.Method_Minusminus:
                    // <Method> ::= '--'
                    break;

                case ProductionIndex.Compilationunit:
                    // <Compilation Unit> ::= <Using List> <Compilation Items>
                    break;

                case ProductionIndex.Usinglist:
                    // <Using List> ::= <Using List> <Using Directive>
                    break;

                case ProductionIndex.Usinglist2:
                    // <Using List> ::= 
                    break;

                case ProductionIndex.Usingdirective_Using_Identifier_Eq_Semi:
                    // <Using Directive> ::= using Identifier '=' <Qualified ID> ';'
                    break;

                case ProductionIndex.Usingdirective_Using_Semi:
                    // <Using Directive> ::= using <Qualified ID> ';'
                    break;

                case ProductionIndex.Compilationitems:
                    // <Compilation Items> ::= <Compilation Items> <Compilation Item>
                    break;

                case ProductionIndex.Compilationitems2:
                    // <Compilation Items> ::= 
                    break;

                case ProductionIndex.Compilationitem:
                    // <Compilation Item> ::= <Namespace Dec>
                    break;

                case ProductionIndex.Compilationitem2:
                    // <Compilation Item> ::= <Namespace Item>
                    break;

                case ProductionIndex.Namespacedec_Namespace_Lbrace_Rbrace:
                    
                    // <Namespace Dec> ::= <Attrib Opt> namespace <Qualified ID> '{' <Using List> <Namespace Items> '}' <Semicolon Opt>
                    break;

                case ProductionIndex.Namespaceitems:
                    // <Namespace Items> ::= <Namespace Items> <Namespace Item>
                    break;

                case ProductionIndex.Namespaceitems2:
                    // <Namespace Items> ::= 
                    break;

                case ProductionIndex.Namespaceitem:
                    // <Namespace Item> ::= <Constant Dec>
                    break;

                case ProductionIndex.Namespaceitem2:
                    // <Namespace Item> ::= <Field Dec>
                    break;

                case ProductionIndex.Namespaceitem3:
                    // <Namespace Item> ::= <Method Dec>
                    break;

                case ProductionIndex.Namespaceitem4:
                    // <Namespace Item> ::= <Property Dec>
                    break;

                case ProductionIndex.Namespaceitem5:
                    // <Namespace Item> ::= <Type Decl>
                    break;

                case ProductionIndex.Typedecl:

                    // <Type Decl> ::= <Class Decl>
                    break;

                case ProductionIndex.Typedecl2:

                    // <Type Decl> ::= <Struct Decl>
                    break;

                case ProductionIndex.Typedecl3:
                    
                    // <Type Decl> ::= <Interface Decl>
                    break;

                case ProductionIndex.Typedecl4:
                    // <Type Decl> ::= <Enum Decl>
                    break;

                case ProductionIndex.Typedecl5:
                    // <Type Decl> ::= <Delegate Decl>
                    break;

                case ProductionIndex.Header:
                    // <Header> ::= <Attrib Opt> <Access Opt> <Modifier List Opt>
                    break;

                case ProductionIndex.Accessopt_Private:
                    // <Access Opt> ::= private
                    break;

                case ProductionIndex.Accessopt_Protected:
                    // <Access Opt> ::= protected
                    break;

                case ProductionIndex.Accessopt_Public:
                    // <Access Opt> ::= public
                    break;

                case ProductionIndex.Accessopt_Internal:
                    // <Access Opt> ::= internal
                    break;

                case ProductionIndex.Accessopt:
                    // <Access Opt> ::= 
                    break;

                case ProductionIndex.Modifierlistopt:
                    // <Modifier List Opt> ::= <Modifier List Opt> <Modifier>
                    break;

                case ProductionIndex.Modifierlistopt2:
                    // <Modifier List Opt> ::= 
                    break;

                case ProductionIndex.Modifier_Abstract:
                    // <Modifier> ::= abstract
                    break;

                case ProductionIndex.Modifier_Extern:
                    // <Modifier> ::= extern
                    break;

                case ProductionIndex.Modifier_New:
                    // <Modifier> ::= new
                    break;

                case ProductionIndex.Modifier_Override:
                    // <Modifier> ::= override
                    break;

                case ProductionIndex.Modifier_Partial:
                    // <Modifier> ::= partial
                    break;

                case ProductionIndex.Modifier_Readonly:
                    // <Modifier> ::= readonly
                    break;

                case ProductionIndex.Modifier_Sealed:
                    // <Modifier> ::= sealed
                    break;

                case ProductionIndex.Modifier_Static:
                    // <Modifier> ::= static
                    break;

                case ProductionIndex.Modifier_Unsafe:
                    // <Modifier> ::= unsafe
                    break;

                case ProductionIndex.Modifier_Virtual:
                    // <Modifier> ::= virtual
                    break;

                case ProductionIndex.Modifier_Volatile:
                    // <Modifier> ::= volatile
                    break;

                case ProductionIndex.Classdecl_Class_Identifier_Lbrace_Rbrace:
                    // <Class Decl> ::= <Header> class Identifier <Class Base Opt> '{' <Class Item Decs Opt> '}' <Semicolon Opt>
                    break;

                case ProductionIndex.Classbaseopt_Colon:
                    // <Class Base Opt> ::= ':' <Class Base List>
                    break;

                case ProductionIndex.Classbaseopt:
                    // <Class Base Opt> ::= 
                    break;

                case ProductionIndex.Classbaselist_Comma:
                    // <Class Base List> ::= <Class Base List> ',' <Non Array Type>
                    break;

                case ProductionIndex.Classbaselist:
                    // <Class Base List> ::= <Non Array Type>
                    break;

                case ProductionIndex.Classitemdecsopt:
                    // <Class Item Decs Opt> ::= <Class Item Decs Opt> <Class Item>
                    break;

                case ProductionIndex.Classitemdecsopt2:
                    // <Class Item Decs Opt> ::= 
                    break;

                case ProductionIndex.Classitem:
                    // <Class Item> ::= <Constant Dec>
                    break;

                case ProductionIndex.Classitem2:
                    // <Class Item> ::= <Field Dec>
                    break;

                case ProductionIndex.Classitem3:
                    // <Class Item> ::= <Method Dec>
                    break;

                case ProductionIndex.Classitem4:
                    // <Class Item> ::= <Property Dec>
                    break;

                case ProductionIndex.Classitem5:
                    // <Class Item> ::= <Event Dec>
                    break;

                case ProductionIndex.Classitem6:
                    // <Class Item> ::= <Indexer Dec>
                    break;

                case ProductionIndex.Classitem7:
                    // <Class Item> ::= <Operator Dec>
                    break;

                case ProductionIndex.Classitem8:
                    // <Class Item> ::= <Constructor Dec>
                    break;

                case ProductionIndex.Classitem9:
                    // <Class Item> ::= <Destructor Dec>
                    break;

                case ProductionIndex.Classitem10:
                    // <Class Item> ::= <Type Decl>
                    break;

                case ProductionIndex.Constantdec_Const_Semi:
                    // <Constant Dec> ::= <Header> const <Type> <Constant Declarators> ';'
                    break;

                case ProductionIndex.Fielddec_Semi:
                    
                    // <Field Dec> ::= <Header> <Type> <Variable Decs> ';'
                    break;

                case ProductionIndex.Methoddec_Lparen_Rparen:
                    // <Method Dec> ::= <Header> <Type> <Qualified ID> '(' <Formal Param List Opt> ')' <Block or Semi>
                    break;

                case ProductionIndex.Formalparamlistopt:
                    // <Formal Param List Opt> ::= <Formal Param List>
                    break;

                case ProductionIndex.Formalparamlistopt2:
                    // <Formal Param List Opt> ::= 
                    break;

                case ProductionIndex.Formalparamlist:
                    // <Formal Param List> ::= <Formal Param>
                    break;

                case ProductionIndex.Formalparamlist_Comma:
                    // <Formal Param List> ::= <Formal Param List> ',' <Formal Param>
                    break;

                case ProductionIndex.Formalparam_Identifier:
                    // <Formal Param> ::= <Attrib Opt> <Type> Identifier
                    break;

                case ProductionIndex.Formalparam_Ref_Identifier:
                    // <Formal Param> ::= <Attrib Opt> ref <Type> Identifier
                    break;

                case ProductionIndex.Formalparam_Out_Identifier:
                    // <Formal Param> ::= <Attrib Opt> out <Type> Identifier
                    break;

                case ProductionIndex.Formalparam_Params_Identifier:
                    // <Formal Param> ::= <Attrib Opt> params <Type> Identifier
                    break;

                case ProductionIndex.Propertydec_Lbrace_Rbrace:
                    // <Property Dec> ::= <Header> <Type> <Qualified ID> '{' <Accessor Dec> '}'
                    break;

                case ProductionIndex.Accessordec_Get:
                    // <Accessor Dec> ::= <Access Opt> get <Block or Semi>
                    break;

                case ProductionIndex.Accessordec_Get_Set:
                    // <Accessor Dec> ::= <Access Opt> get <Block or Semi> <Access Opt> set <Block or Semi>
                    break;

                case ProductionIndex.Accessordec_Set:
                    
                    // <Accessor Dec> ::= <Access Opt> set <Block or Semi>
                    break;

                case ProductionIndex.Accessordec_Set_Get:
                    // <Accessor Dec> ::= <Access Opt> set <Block or Semi> <Access Opt> get <Block or Semi>
                    break;

                case ProductionIndex.Eventdec_Event_Semi:

                    // <Event Dec> ::= <Header> event <Type> <Variable Decs> ';'
                    break;

                case ProductionIndex.Eventdec_Event_Lbrace_Rbrace:
                    // <Event Dec> ::= <Header> event <Type> <Qualified ID> '{' <Event Accessor Decs> '}'
                    break;

                case ProductionIndex.Eventaccessordecs_Add:
                    // <Event Accessor Decs> ::= add <Block or Semi>
                    break;

                case ProductionIndex.Eventaccessordecs_Add_Remove:
                    // <Event Accessor Decs> ::= add <Block or Semi> remove <Block or Semi>
                    break;

                case ProductionIndex.Eventaccessordecs_Remove:
                    // <Event Accessor Decs> ::= remove <Block or Semi>
                    break;

                case ProductionIndex.Eventaccessordecs_Remove_Add:
                    // <Event Accessor Decs> ::= remove <Block or Semi> add <Block or Semi>
                    break;

                case ProductionIndex.Indexerdec_Lbracket_Rbracket_Lbrace_Rbrace:

                    // <Indexer Dec> ::= <Header> <Type> <Qualified ID> '[' <Formal Param List> ']' '{' <Accessor Dec> '}'
                    break;

                case ProductionIndex.Operatordec:
                    
                    // <Operator Dec> ::= <Header> <Overload Operator Decl> <Block or Semi>
                    break;

                case ProductionIndex.Operatordec2:
                    // <Operator Dec> ::= <Header> <Conversion Operator Decl> <Block or Semi>
                    break;

                case ProductionIndex.Overloadoperatordecl_Operator_Lparen_Identifier_Rparen:
                    // <Overload Operator Decl> ::= <Type> operator <Overload Op> '(' <Type> Identifier ')'
                    break;

                case ProductionIndex.Overloadoperatordecl_Operator_Lparen_Identifier_Comma_Identifier_Rparen:
                    // <Overload Operator Decl> ::= <Type> operator <Overload Op> '(' <Type> Identifier ',' <Type> Identifier ')'
                    break;

                case ProductionIndex.Conversionoperatordecl_Implicit_Operator_Lparen_Identifier_Rparen:
                    // <Conversion Operator Decl> ::= implicit operator <Type> '(' <Type> Identifier ')'
                    break;

                case ProductionIndex.Conversionoperatordecl_Explicit_Operator_Lparen_Identifier_Rparen:
                    // <Conversion Operator Decl> ::= explicit operator <Type> '(' <Type> Identifier ')'
                    break;

                case ProductionIndex.Overloadop_Plus:
                    // <Overload Op> ::= '+'
                    break;

                case ProductionIndex.Overloadop_Minus:
                    // <Overload Op> ::= '-'
                    break;

                case ProductionIndex.Overloadop_Exclam:
                    // <Overload Op> ::= '!'
                    break;

                case ProductionIndex.Overloadop_Tilde:
                    // <Overload Op> ::= '~'
                    break;

                case ProductionIndex.Overloadop_Plusplus:
                    // <Overload Op> ::= '++'
                    break;

                case ProductionIndex.Overloadop_Minusminus:
                    // <Overload Op> ::= '--'
                    break;

                case ProductionIndex.Overloadop_True:
                    // <Overload Op> ::= true
                    break;

                case ProductionIndex.Overloadop_False:
                    // <Overload Op> ::= false
                    break;

                case ProductionIndex.Overloadop_Times:
                    // <Overload Op> ::= '*'
                    break;

                case ProductionIndex.Overloadop_Div:
                    // <Overload Op> ::= '/'
                    break;

                case ProductionIndex.Overloadop_Percent:
                    // <Overload Op> ::= '%'
                    break;

                case ProductionIndex.Overloadop_Amp:
                    // <Overload Op> ::= '&'
                    break;

                case ProductionIndex.Overloadop_Pipe:
                    // <Overload Op> ::= '|'
                    break;

                case ProductionIndex.Overloadop_Caret:
                    // <Overload Op> ::= '^'
                    break;

                case ProductionIndex.Overloadop_Ltlt:
                    // <Overload Op> ::= '<<'
                    break;

                case ProductionIndex.Overloadop_Gtgt:
                    // <Overload Op> ::= '>>'
                    break;

                case ProductionIndex.Overloadop_Eqeq:
                    // <Overload Op> ::= '=='
                    break;

                case ProductionIndex.Overloadop_Exclameq:
                    // <Overload Op> ::= '!='
                    break;

                case ProductionIndex.Overloadop_Gt:
                    // <Overload Op> ::= '>'
                    break;

                case ProductionIndex.Overloadop_Lt:
                    // <Overload Op> ::= '<'
                    break;

                case ProductionIndex.Overloadop_Gteq:
                    // <Overload Op> ::= '>='
                    break;

                case ProductionIndex.Overloadop_Lteq:
                    // <Overload Op> ::= '<='
                    break;

                case ProductionIndex.Constructordec:
                    
                    // <Constructor Dec> ::= <Header> <Constructor Declarator> <Block or Semi>
                    break;

                case ProductionIndex.Constructordeclarator_Identifier_Lparen_Rparen:
                    // <Constructor Declarator> ::= Identifier '(' <Formal Param List Opt> ')' <Constructor Init Opt>
                    break;

                case ProductionIndex.Constructorinitopt:
                    // <Constructor Init Opt> ::= <Constructor Init>
                    break;

                case ProductionIndex.Constructorinitopt2:
                    // <Constructor Init Opt> ::= 
                    break;

                case ProductionIndex.Constructorinit_Colon_Base_Lparen_Rparen:
                    // <Constructor Init> ::= ':' base '(' <Arg List Opt> ')'
                    break;

                case ProductionIndex.Constructorinit_Colon_This_Lparen_Rparen:
                    // <Constructor Init> ::= ':' this '(' <Arg List Opt> ')'
                    break;

                case ProductionIndex.Destructordec_Tilde_Identifier_Lparen_Rparen:
                    // <Destructor Dec> ::= <Header> '~' Identifier '(' ')' <Block>
                    break;

                case ProductionIndex.Structdecl_Struct_Identifier_Lbrace_Rbrace:
                    // <Struct Decl> ::= <Header> struct Identifier <Class Base Opt> '{' <Class Item Decs Opt> '}' <Semicolon Opt>
                    break;

                case ProductionIndex.Arrayinitializeropt:
                    // <Array Initializer Opt> ::= <Array Initializer>
                    break;

                case ProductionIndex.Arrayinitializeropt2:
                    // <Array Initializer Opt> ::= 
                    break;

                case ProductionIndex.Arrayinitializer_Lbrace_Rbrace:
                    // <Array Initializer> ::= '{' <Variable Initializer List Opt> '}'
                    break;

                case ProductionIndex.Arrayinitializer_Lbrace_Comma_Rbrace:
                    // <Array Initializer> ::= '{' <Variable Initializer List> ',' '}'
                    break;

                case ProductionIndex.Variableinitializerlistopt:
                    // <Variable Initializer List Opt> ::= <Variable Initializer List>
                    break;

                case ProductionIndex.Variableinitializerlistopt2:
                    // <Variable Initializer List Opt> ::= 
                    break;

                case ProductionIndex.Variableinitializerlist:
                    // <Variable Initializer List> ::= <Variable Initializer>
                    break;

                case ProductionIndex.Variableinitializerlist_Comma:
                    // <Variable Initializer List> ::= <Variable Initializer List> ',' <Variable Initializer>
                    break;

                case ProductionIndex.Interfacedecl_Interface_Identifier_Lbrace_Rbrace:
                    // <Interface Decl> ::= <Header> interface Identifier <Interface Base Opt> '{' <Interface Item Decs Opt> '}' <Semicolon Opt>
                    break;

                case ProductionIndex.Interfacebaseopt_Colon:
                    // <Interface Base Opt> ::= ':' <Class Base List>
                    break;

                case ProductionIndex.Interfacebaseopt:
                    // <Interface Base Opt> ::= 
                    break;

                case ProductionIndex.Interfaceitemdecsopt:
                    // <Interface Item Decs Opt> ::= <Interface Item Decs Opt> <Interface Item Dec>
                    break;

                case ProductionIndex.Interfaceitemdecsopt2:
                    // <Interface Item Decs Opt> ::= 
                    break;

                case ProductionIndex.Interfaceitemdec:
                    // <Interface Item Dec> ::= <Interface Method Dec>
                    break;

                case ProductionIndex.Interfaceitemdec2:
                    // <Interface Item Dec> ::= <Interface Property Dec>
                    break;

                case ProductionIndex.Interfaceitemdec3:
                    // <Interface Item Dec> ::= <Interface Event Dec>
                    break;

                case ProductionIndex.Interfaceitemdec4:
                    // <Interface Item Dec> ::= <Interface Indexer Dec>
                    break;

                case ProductionIndex.Interfacemethoddec_Identifier_Lparen_Rparen:
                    // <Interface Method Dec> ::= <Attrib Opt> <New Opt> <Type> Identifier '(' <Formal Param List Opt> ')' <Interface Empty Body>
                    break;

                case ProductionIndex.Newopt_New:
                    // <New Opt> ::= new
                    break;

                case ProductionIndex.Newopt:
                    // <New Opt> ::= 
                    break;

                case ProductionIndex.Interfacepropertydec_Identifier_Lbrace_Rbrace:
                    // <Interface Property Dec> ::= <Attrib Opt> <New Opt> <Type> Identifier '{' <Interface Accessors> '}'
                    break;

                case ProductionIndex.Interfaceindexerdec_This_Lbracket_Rbracket_Lbrace_Rbrace:
                    // <Interface Indexer Dec> ::= <Attrib Opt> <New Opt> <Type> this '[' <Formal Param List> ']' '{' <Interface Accessors> '}'
                    break;

                case ProductionIndex.Interfaceaccessors_Get:
                    // <Interface Accessors> ::= <Attrib Opt> <Access Opt> get <Interface Empty Body>
                    break;

                case ProductionIndex.Interfaceaccessors_Set:
                    // <Interface Accessors> ::= <Attrib Opt> <Access Opt> set <Interface Empty Body>
                    break;

                case ProductionIndex.Interfaceaccessors_Get_Set:
                    // <Interface Accessors> ::= <Attrib Opt> <Access Opt> get <Interface Empty Body> <Attrib Opt> <Access Opt> set <Interface Empty Body>
                    break;

                case ProductionIndex.Interfaceaccessors_Set_Get:
                    // <Interface Accessors> ::= <Attrib Opt> <Access Opt> set <Interface Empty Body> <Attrib Opt> <Access Opt> get <Interface Empty Body>
                    break;

                case ProductionIndex.Interfaceeventdec_Event_Identifier:
                    // <Interface Event Dec> ::= <Attrib Opt> <New Opt> event <Type> Identifier <Interface Empty Body>
                    break;

                case ProductionIndex.Interfaceemptybody_Semi:
                    // <Interface Empty Body> ::= ';'
                    break;

                case ProductionIndex.Interfaceemptybody_Lbrace_Rbrace:
                    // <Interface Empty Body> ::= '{' '}'
                    break;

                case ProductionIndex.Enumdecl_Enum_Identifier:
                    // <Enum Decl> ::= <Header> enum Identifier <Enum Base Opt> <Enum Body> <Semicolon Opt>
                    break;

                case ProductionIndex.Enumbaseopt_Colon:
                    // <Enum Base Opt> ::= ':' <Integral Type>
                    break;

                case ProductionIndex.Enumbaseopt:
                    // <Enum Base Opt> ::= 
                    break;

                case ProductionIndex.Enumbody_Lbrace_Rbrace:
                    // <Enum Body> ::= '{' <Enum Item Decs Opt> '}'
                    break;

                case ProductionIndex.Enumbody_Lbrace_Comma_Rbrace:
                    // <Enum Body> ::= '{' <Enum Item Decs> ',' '}'
                    break;

                case ProductionIndex.Enumitemdecsopt:
                    // <Enum Item Decs Opt> ::= <Enum Item Decs>
                    break;

                case ProductionIndex.Enumitemdecsopt2:
                    // <Enum Item Decs Opt> ::= 
                    break;

                case ProductionIndex.Enumitemdecs:
                    // <Enum Item Decs> ::= <Enum Item Dec>
                    break;

                case ProductionIndex.Enumitemdecs_Comma:
                    // <Enum Item Decs> ::= <Enum Item Decs> ',' <Enum Item Dec>
                    break;

                case ProductionIndex.Enumitemdec_Identifier:
                    // <Enum Item Dec> ::= <Attrib Opt> Identifier
                    break;

                case ProductionIndex.Enumitemdec_Identifier_Eq:
                    // <Enum Item Dec> ::= <Attrib Opt> Identifier '=' <Expression>
                    break;

                case ProductionIndex.Delegatedecl_Delegate_Identifier_Lparen_Rparen_Semi:
                    // <Delegate Decl> ::= <Header> delegate <Type> Identifier '(' <Formal Param List Opt> ')' ';'
                    break;

                case ProductionIndex.Attribopt:
                    // <Attrib Opt> ::= <Attrib Opt> <Attrib Section>
                    break;

                case ProductionIndex.Attribopt2:
                    // <Attrib Opt> ::= 
                    break;

                case ProductionIndex.Attribsection_Lbracket_Rbracket:
                    // <Attrib Section> ::= '[' <Attrib Target Spec Opt> <Attrib List> ']'
                    break;

                case ProductionIndex.Attribsection_Lbracket_Comma_Rbracket:
                    // <Attrib Section> ::= '[' <Attrib Target Spec Opt> <Attrib List> ',' ']'
                    break;

                case ProductionIndex.Attribtargetspecopt_Assembly_Colon:
                    // <Attrib Target Spec Opt> ::= assembly ':'
                    break;

                case ProductionIndex.Attribtargetspecopt_Field_Colon:
                    // <Attrib Target Spec Opt> ::= field ':'
                    break;

                case ProductionIndex.Attribtargetspecopt_Event_Colon:
                    // <Attrib Target Spec Opt> ::= event ':'
                    break;

                case ProductionIndex.Attribtargetspecopt_Method_Colon:
                    // <Attrib Target Spec Opt> ::= method ':'
                    break;

                case ProductionIndex.Attribtargetspecopt_Module_Colon:
                    // <Attrib Target Spec Opt> ::= module ':'
                    break;

                case ProductionIndex.Attribtargetspecopt_Param_Colon:
                    // <Attrib Target Spec Opt> ::= param ':'
                    break;

                case ProductionIndex.Attribtargetspecopt_Property_Colon:
                    // <Attrib Target Spec Opt> ::= property ':'
                    break;

                case ProductionIndex.Attribtargetspecopt_Return_Colon:
                    // <Attrib Target Spec Opt> ::= return ':'
                    break;

                case ProductionIndex.Attribtargetspecopt_Type_Colon:
                    // <Attrib Target Spec Opt> ::= type ':'
                    break;

                case ProductionIndex.Attribtargetspecopt:
                    // <Attrib Target Spec Opt> ::= 
                    break;

                case ProductionIndex.Attriblist:
                    // <Attrib List> ::= <Attribute>
                    break;

                case ProductionIndex.Attriblist_Comma:
                    // <Attrib List> ::= <Attrib List> ',' <Attribute>
                    break;

                case ProductionIndex.Attribute_Lparen_Rparen:
                    // <Attribute> ::= <Qualified ID> '(' <Expression List> ')'
                    break;

                case ProductionIndex.Attribute_Lparen_Rparen2:
                    // <Attribute> ::= <Qualified ID> '(' ')'
                    break;

                case ProductionIndex.Attribute:
                    // <Attribute> ::= <Qualified ID>
                    break;

            }  //switch

            return result;
        }

    }; //MyParser
}